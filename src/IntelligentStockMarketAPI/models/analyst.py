# coding: utf-8

"""
    EOD STOCK API

     <h2>Intelligent EOD Stocks API</h2>     <p>     End of day stock world wide STOCK API, this api is intended for use by web application developers,      and service providers looking for up-to-date always available.     <ul>         <li>Exchange Information</li>         <li>Stock Tickers Data</li>         <li>End of Day (EOD) Stock Data</li>         <li>Fundamental Data</li>         <li>Stock Options And Splits Data</li>         <li>Financial News API</li>         <li>Social Media Trend Data For Stocks</li>         <li>Sentiment Analysis for News & Social Media</li>     </ul>                The information provided covers more than 150 000 tickers, stocks, mutual funds and more around the world.         we provide information for any period, including daily, weekly.     </p>    # noqa: E501

    The version of the OpenAPI document: v1
    Contact: support@eod-stock-api.site
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from src.IntelligentStockMarketAPI.configuration import Configuration


class Analyst(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'buy': 'int',
        'fundamental_id': 'str',
        'hold': 'int',
        'rating': 'float',
        'sell': 'int',
        'strong_buy': 'int',
        'strong_sell': 'int',
        'target_price': 'float'
    }

    attribute_map = {
        'buy': 'buy',
        'fundamental_id': 'fundamental_id',
        'hold': 'hold',
        'rating': 'rating',
        'sell': 'sell',
        'strong_buy': 'strong_buy',
        'strong_sell': 'strong_sell',
        'target_price': 'target_price'
    }

    def __init__(self, buy=None, fundamental_id=None, hold=None, rating=None, sell=None, strong_buy=None, strong_sell=None, target_price=None, local_vars_configuration=None):  # noqa: E501
        """Analyst - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._buy = None
        self._fundamental_id = None
        self._hold = None
        self._rating = None
        self._sell = None
        self._strong_buy = None
        self._strong_sell = None
        self._target_price = None
        self.discriminator = None

        if buy is not None:
            self.buy = buy
        if fundamental_id is not None:
            self.fundamental_id = fundamental_id
        if hold is not None:
            self.hold = hold
        if rating is not None:
            self.rating = rating
        if sell is not None:
            self.sell = sell
        if strong_buy is not None:
            self.strong_buy = strong_buy
        if strong_sell is not None:
            self.strong_sell = strong_sell
        if target_price is not None:
            self.target_price = target_price

    @property
    def buy(self):
        """Gets the buy of this Analyst.  # noqa: E501

        Buy Rating  # noqa: E501

        :return: The buy of this Analyst.  # noqa: E501
        :rtype: int
        """
        return self._buy

    @buy.setter
    def buy(self, buy):
        """Sets the buy of this Analyst.

        Buy Rating  # noqa: E501

        :param buy: The buy of this Analyst.  # noqa: E501
        :type: int
        """

        self._buy = buy

    @property
    def fundamental_id(self):
        """Gets the fundamental_id of this Analyst.  # noqa: E501

        Fundamental id  # noqa: E501

        :return: The fundamental_id of this Analyst.  # noqa: E501
        :rtype: str
        """
        return self._fundamental_id

    @fundamental_id.setter
    def fundamental_id(self, fundamental_id):
        """Sets the fundamental_id of this Analyst.

        Fundamental id  # noqa: E501

        :param fundamental_id: The fundamental_id of this Analyst.  # noqa: E501
        :type: str
        """

        self._fundamental_id = fundamental_id

    @property
    def hold(self):
        """Gets the hold of this Analyst.  # noqa: E501

        Hold Rating  # noqa: E501

        :return: The hold of this Analyst.  # noqa: E501
        :rtype: int
        """
        return self._hold

    @hold.setter
    def hold(self, hold):
        """Sets the hold of this Analyst.

        Hold Rating  # noqa: E501

        :param hold: The hold of this Analyst.  # noqa: E501
        :type: int
        """

        self._hold = hold

    @property
    def rating(self):
        """Gets the rating of this Analyst.  # noqa: E501

        Analyst Overall Rating  # noqa: E501

        :return: The rating of this Analyst.  # noqa: E501
        :rtype: float
        """
        return self._rating

    @rating.setter
    def rating(self, rating):
        """Sets the rating of this Analyst.

        Analyst Overall Rating  # noqa: E501

        :param rating: The rating of this Analyst.  # noqa: E501
        :type: float
        """

        self._rating = rating

    @property
    def sell(self):
        """Gets the sell of this Analyst.  # noqa: E501

        Sell Rating  # noqa: E501

        :return: The sell of this Analyst.  # noqa: E501
        :rtype: int
        """
        return self._sell

    @sell.setter
    def sell(self, sell):
        """Sets the sell of this Analyst.

        Sell Rating  # noqa: E501

        :param sell: The sell of this Analyst.  # noqa: E501
        :type: int
        """

        self._sell = sell

    @property
    def strong_buy(self):
        """Gets the strong_buy of this Analyst.  # noqa: E501

        Strong buy Rating  # noqa: E501

        :return: The strong_buy of this Analyst.  # noqa: E501
        :rtype: int
        """
        return self._strong_buy

    @strong_buy.setter
    def strong_buy(self, strong_buy):
        """Sets the strong_buy of this Analyst.

        Strong buy Rating  # noqa: E501

        :param strong_buy: The strong_buy of this Analyst.  # noqa: E501
        :type: int
        """

        self._strong_buy = strong_buy

    @property
    def strong_sell(self):
        """Gets the strong_sell of this Analyst.  # noqa: E501

        Strong sell Rating  # noqa: E501

        :return: The strong_sell of this Analyst.  # noqa: E501
        :rtype: int
        """
        return self._strong_sell

    @strong_sell.setter
    def strong_sell(self, strong_sell):
        """Sets the strong_sell of this Analyst.

        Strong sell Rating  # noqa: E501

        :param strong_sell: The strong_sell of this Analyst.  # noqa: E501
        :type: int
        """

        self._strong_sell = strong_sell

    @property
    def target_price(self):
        """Gets the target_price of this Analyst.  # noqa: E501

        Target Price  # noqa: E501

        :return: The target_price of this Analyst.  # noqa: E501
        :rtype: float
        """
        return self._target_price

    @target_price.setter
    def target_price(self, target_price):
        """Sets the target_price of this Analyst.

        Target Price  # noqa: E501

        :param target_price: The target_price of this Analyst.  # noqa: E501
        :type: float
        """

        self._target_price = target_price

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Analyst):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Analyst):
            return True

        return self.to_dict() != other.to_dict()

# coding: utf-8

"""
    EOD STOCK API

     <h2>Intelligent EOD Stocks API</h2>     <p>     End of day stock world wide STOCK API, this api is intended for use by web application developers,      and service providers looking for up-to-date always available.     <ul>         <li>Exchange Information</li>         <li>Stock Tickers Data</li>         <li>End of Day (EOD) Stock Data</li>         <li>Fundamental Data</li>         <li>Stock Options And Splits Data</li>         <li>Financial News API</li>         <li>Social Media Trend Data For Stocks</li>         <li>Sentiment Analysis for News & Social Media</li>     </ul>                The information provided covers more than 150 000 tickers, stocks, mutual funds and more around the world.         we provide information for any period, including daily, weekly.     </p>    # noqa: E501

    The version of the OpenAPI document: v1
    Contact: support@eod-stock-api.site
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from src.IntelligentStockMarketAPI.configuration import Configuration


class SplitDividends(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'date_created': 'date',
        'dividend_date': 'date',
        'ex_dividend_date': 'date',
        'forward_annual_dividend_rate': 'float',
        'forward_annual_dividend_yield': 'float',
        'fundamental_id': 'str',
        'last_split_date': 'date',
        'last_split_factor': 'str',
        'number_of_dividends_by_year': 'NumberDividendsByYear',
        'payout_ratio': 'float'
    }

    attribute_map = {
        'date_created': 'date_created',
        'dividend_date': 'dividend_date',
        'ex_dividend_date': 'ex_dividend_date',
        'forward_annual_dividend_rate': 'forward_annual_dividend_rate',
        'forward_annual_dividend_yield': 'forward_annual_dividend_yield',
        'fundamental_id': 'fundamental_id',
        'last_split_date': 'last_split_date',
        'last_split_factor': 'last_split_factor',
        'number_of_dividends_by_year': 'number_of_dividends_by_year',
        'payout_ratio': 'payout_ratio'
    }

    def __init__(self, date_created=None, dividend_date=None, ex_dividend_date=None, forward_annual_dividend_rate=None, forward_annual_dividend_yield=None, fundamental_id=None, last_split_date=None, last_split_factor=None, number_of_dividends_by_year=None, payout_ratio=None, local_vars_configuration=None):  # noqa: E501
        """SplitDividends - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._date_created = None
        self._dividend_date = None
        self._ex_dividend_date = None
        self._forward_annual_dividend_rate = None
        self._forward_annual_dividend_yield = None
        self._fundamental_id = None
        self._last_split_date = None
        self._last_split_factor = None
        self._number_of_dividends_by_year = None
        self._payout_ratio = None
        self.discriminator = None

        if date_created is not None:
            self.date_created = date_created
        if dividend_date is not None:
            self.dividend_date = dividend_date
        if ex_dividend_date is not None:
            self.ex_dividend_date = ex_dividend_date
        if forward_annual_dividend_rate is not None:
            self.forward_annual_dividend_rate = forward_annual_dividend_rate
        if forward_annual_dividend_yield is not None:
            self.forward_annual_dividend_yield = forward_annual_dividend_yield
        if fundamental_id is not None:
            self.fundamental_id = fundamental_id
        if last_split_date is not None:
            self.last_split_date = last_split_date
        if last_split_factor is not None:
            self.last_split_factor = last_split_factor
        if number_of_dividends_by_year is not None:
            self.number_of_dividends_by_year = number_of_dividends_by_year
        if payout_ratio is not None:
            self.payout_ratio = payout_ratio

    @property
    def date_created(self):
        """Gets the date_created of this SplitDividends.  # noqa: E501

        Date of valuation  # noqa: E501

        :return: The date_created of this SplitDividends.  # noqa: E501
        :rtype: date
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this SplitDividends.

        Date of valuation  # noqa: E501

        :param date_created: The date_created of this SplitDividends.  # noqa: E501
        :type: date
        """

        self._date_created = date_created

    @property
    def dividend_date(self):
        """Gets the dividend_date of this SplitDividends.  # noqa: E501

        Date  # noqa: E501

        :return: The dividend_date of this SplitDividends.  # noqa: E501
        :rtype: date
        """
        return self._dividend_date

    @dividend_date.setter
    def dividend_date(self, dividend_date):
        """Sets the dividend_date of this SplitDividends.

        Date  # noqa: E501

        :param dividend_date: The dividend_date of this SplitDividends.  # noqa: E501
        :type: date
        """

        self._dividend_date = dividend_date

    @property
    def ex_dividend_date(self):
        """Gets the ex_dividend_date of this SplitDividends.  # noqa: E501

        Date  # noqa: E501

        :return: The ex_dividend_date of this SplitDividends.  # noqa: E501
        :rtype: date
        """
        return self._ex_dividend_date

    @ex_dividend_date.setter
    def ex_dividend_date(self, ex_dividend_date):
        """Sets the ex_dividend_date of this SplitDividends.

        Date  # noqa: E501

        :param ex_dividend_date: The ex_dividend_date of this SplitDividends.  # noqa: E501
        :type: date
        """

        self._ex_dividend_date = ex_dividend_date

    @property
    def forward_annual_dividend_rate(self):
        """Gets the forward_annual_dividend_rate of this SplitDividends.  # noqa: E501

        Dividend Rate  # noqa: E501

        :return: The forward_annual_dividend_rate of this SplitDividends.  # noqa: E501
        :rtype: float
        """
        return self._forward_annual_dividend_rate

    @forward_annual_dividend_rate.setter
    def forward_annual_dividend_rate(self, forward_annual_dividend_rate):
        """Sets the forward_annual_dividend_rate of this SplitDividends.

        Dividend Rate  # noqa: E501

        :param forward_annual_dividend_rate: The forward_annual_dividend_rate of this SplitDividends.  # noqa: E501
        :type: float
        """

        self._forward_annual_dividend_rate = forward_annual_dividend_rate

    @property
    def forward_annual_dividend_yield(self):
        """Gets the forward_annual_dividend_yield of this SplitDividends.  # noqa: E501

        Dividend Yield  # noqa: E501

        :return: The forward_annual_dividend_yield of this SplitDividends.  # noqa: E501
        :rtype: float
        """
        return self._forward_annual_dividend_yield

    @forward_annual_dividend_yield.setter
    def forward_annual_dividend_yield(self, forward_annual_dividend_yield):
        """Sets the forward_annual_dividend_yield of this SplitDividends.

        Dividend Yield  # noqa: E501

        :param forward_annual_dividend_yield: The forward_annual_dividend_yield of this SplitDividends.  # noqa: E501
        :type: float
        """

        self._forward_annual_dividend_yield = forward_annual_dividend_yield

    @property
    def fundamental_id(self):
        """Gets the fundamental_id of this SplitDividends.  # noqa: E501

        Fundamental id  # noqa: E501

        :return: The fundamental_id of this SplitDividends.  # noqa: E501
        :rtype: str
        """
        return self._fundamental_id

    @fundamental_id.setter
    def fundamental_id(self, fundamental_id):
        """Sets the fundamental_id of this SplitDividends.

        Fundamental id  # noqa: E501

        :param fundamental_id: The fundamental_id of this SplitDividends.  # noqa: E501
        :type: str
        """

        self._fundamental_id = fundamental_id

    @property
    def last_split_date(self):
        """Gets the last_split_date of this SplitDividends.  # noqa: E501

        Date  # noqa: E501

        :return: The last_split_date of this SplitDividends.  # noqa: E501
        :rtype: date
        """
        return self._last_split_date

    @last_split_date.setter
    def last_split_date(self, last_split_date):
        """Sets the last_split_date of this SplitDividends.

        Date  # noqa: E501

        :param last_split_date: The last_split_date of this SplitDividends.  # noqa: E501
        :type: date
        """

        self._last_split_date = last_split_date

    @property
    def last_split_factor(self):
        """Gets the last_split_factor of this SplitDividends.  # noqa: E501

        Last Split factor  # noqa: E501

        :return: The last_split_factor of this SplitDividends.  # noqa: E501
        :rtype: str
        """
        return self._last_split_factor

    @last_split_factor.setter
    def last_split_factor(self, last_split_factor):
        """Sets the last_split_factor of this SplitDividends.

        Last Split factor  # noqa: E501

        :param last_split_factor: The last_split_factor of this SplitDividends.  # noqa: E501
        :type: str
        """

        self._last_split_factor = last_split_factor

    @property
    def number_of_dividends_by_year(self):
        """Gets the number_of_dividends_by_year of this SplitDividends.  # noqa: E501


        :return: The number_of_dividends_by_year of this SplitDividends.  # noqa: E501
        :rtype: NumberDividendsByYear
        """
        return self._number_of_dividends_by_year

    @number_of_dividends_by_year.setter
    def number_of_dividends_by_year(self, number_of_dividends_by_year):
        """Sets the number_of_dividends_by_year of this SplitDividends.


        :param number_of_dividends_by_year: The number_of_dividends_by_year of this SplitDividends.  # noqa: E501
        :type: NumberDividendsByYear
        """

        self._number_of_dividends_by_year = number_of_dividends_by_year

    @property
    def payout_ratio(self):
        """Gets the payout_ratio of this SplitDividends.  # noqa: E501

        Payout Ratio  # noqa: E501

        :return: The payout_ratio of this SplitDividends.  # noqa: E501
        :rtype: float
        """
        return self._payout_ratio

    @payout_ratio.setter
    def payout_ratio(self, payout_ratio):
        """Sets the payout_ratio of this SplitDividends.

        Payout Ratio  # noqa: E501

        :param payout_ratio: The payout_ratio of this SplitDividends.  # noqa: E501
        :type: float
        """

        self._payout_ratio = payout_ratio

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SplitDividends):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SplitDividends):
            return True

        return self.to_dict() != other.to_dict()

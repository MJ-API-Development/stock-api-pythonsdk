# coding: utf-8

"""
    EOD STOCK API

     <h2>Intelligent EOD Stocks API</h2>     <p>     End of day stock world wide STOCK API, this api is intended for use by web application developers,      and service providers looking for up-to-date always available.     <ul>         <li>Exchange Information</li>         <li>Stock Tickers Data</li>         <li>End of Day (EOD) Stock Data</li>         <li>Fundamental Data</li>         <li>Stock Options And Splits Data</li>         <li>Financial News API</li>         <li>Social Media Trend Data For Stocks</li>         <li>Sentiment Analysis for News & Social Media</li>     </ul>                The information provided covers more than 150 000 tickers, stocks, mutual funds and more around the world.         we provide information for any period, including daily, weekly.     </p>    # noqa: E501

    The version of the OpenAPI document: v1
    Contact: support@eod-stock-api.site
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from src.IntelligentStockMarketAPI.configuration import Configuration


class Technicals(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'beta': 'float',
        'date_created': 'date',
        'fundamental_id': 'str',
        'shares_short': 'int',
        'shares_short_prior_month': 'int',
        'short_percent': 'float',
        'short_ratio': 'float',
        't_200_day_ma': 'float',
        't_50_day_ma': 'float',
        't_52_week_high': 'float',
        't_52_week_low': 'float'
    }

    attribute_map = {
        'beta': 'beta',
        'date_created': 'date_created',
        'fundamental_id': 'fundamental_id',
        'shares_short': 'shares_short',
        'shares_short_prior_month': 'shares_short_prior_month',
        'short_percent': 'short_percent',
        'short_ratio': 'short_ratio',
        't_200_day_ma': 't_200_day_ma',
        't_50_day_ma': 't_50_day_ma',
        't_52_week_high': 't_52_week_high',
        't_52_week_low': 't_52_week_low'
    }

    def __init__(self, beta=None, date_created=None, fundamental_id=None, shares_short=None, shares_short_prior_month=None, short_percent=None, short_ratio=None, t_200_day_ma=None, t_50_day_ma=None, t_52_week_high=None, t_52_week_low=None, local_vars_configuration=None):  # noqa: E501
        """Technicals - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._beta = None
        self._date_created = None
        self._fundamental_id = None
        self._shares_short = None
        self._shares_short_prior_month = None
        self._short_percent = None
        self._short_ratio = None
        self._t_200_day_ma = None
        self._t_50_day_ma = None
        self._t_52_week_high = None
        self._t_52_week_low = None
        self.discriminator = None

        if beta is not None:
            self.beta = beta
        if date_created is not None:
            self.date_created = date_created
        if fundamental_id is not None:
            self.fundamental_id = fundamental_id
        if shares_short is not None:
            self.shares_short = shares_short
        if shares_short_prior_month is not None:
            self.shares_short_prior_month = shares_short_prior_month
        if short_percent is not None:
            self.short_percent = short_percent
        if short_ratio is not None:
            self.short_ratio = short_ratio
        if t_200_day_ma is not None:
            self.t_200_day_ma = t_200_day_ma
        if t_50_day_ma is not None:
            self.t_50_day_ma = t_50_day_ma
        if t_52_week_high is not None:
            self.t_52_week_high = t_52_week_high
        if t_52_week_low is not None:
            self.t_52_week_low = t_52_week_low

    @property
    def beta(self):
        """Gets the beta of this Technicals.  # noqa: E501

        the expected move in a stock relative to movements in the overall market  # noqa: E501

        :return: The beta of this Technicals.  # noqa: E501
        :rtype: float
        """
        return self._beta

    @beta.setter
    def beta(self, beta):
        """Sets the beta of this Technicals.

        the expected move in a stock relative to movements in the overall market  # noqa: E501

        :param beta: The beta of this Technicals.  # noqa: E501
        :type: float
        """

        self._beta = beta

    @property
    def date_created(self):
        """Gets the date_created of this Technicals.  # noqa: E501

        Date of technical valuation  # noqa: E501

        :return: The date_created of this Technicals.  # noqa: E501
        :rtype: date
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this Technicals.

        Date of technical valuation  # noqa: E501

        :param date_created: The date_created of this Technicals.  # noqa: E501
        :type: date
        """

        self._date_created = date_created

    @property
    def fundamental_id(self):
        """Gets the fundamental_id of this Technicals.  # noqa: E501

        Fundamental id  # noqa: E501

        :return: The fundamental_id of this Technicals.  # noqa: E501
        :rtype: str
        """
        return self._fundamental_id

    @fundamental_id.setter
    def fundamental_id(self, fundamental_id):
        """Sets the fundamental_id of this Technicals.

        Fundamental id  # noqa: E501

        :param fundamental_id: The fundamental_id of this Technicals.  # noqa: E501
        :type: str
        """

        self._fundamental_id = fundamental_id

    @property
    def shares_short(self):
        """Gets the shares_short of this Technicals.  # noqa: E501

        Number of shares Shorted  # noqa: E501

        :return: The shares_short of this Technicals.  # noqa: E501
        :rtype: int
        """
        return self._shares_short

    @shares_short.setter
    def shares_short(self, shares_short):
        """Sets the shares_short of this Technicals.

        Number of shares Shorted  # noqa: E501

        :param shares_short: The shares_short of this Technicals.  # noqa: E501
        :type: int
        """

        self._shares_short = shares_short

    @property
    def shares_short_prior_month(self):
        """Gets the shares_short_prior_month of this Technicals.  # noqa: E501

        Number of shares Shorted Previous Month  # noqa: E501

        :return: The shares_short_prior_month of this Technicals.  # noqa: E501
        :rtype: int
        """
        return self._shares_short_prior_month

    @shares_short_prior_month.setter
    def shares_short_prior_month(self, shares_short_prior_month):
        """Sets the shares_short_prior_month of this Technicals.

        Number of shares Shorted Previous Month  # noqa: E501

        :param shares_short_prior_month: The shares_short_prior_month of this Technicals.  # noqa: E501
        :type: int
        """

        self._shares_short_prior_month = shares_short_prior_month

    @property
    def short_percent(self):
        """Gets the short_percent of this Technicals.  # noqa: E501

        Percentage of a shorted Shares  # noqa: E501

        :return: The short_percent of this Technicals.  # noqa: E501
        :rtype: float
        """
        return self._short_percent

    @short_percent.setter
    def short_percent(self, short_percent):
        """Sets the short_percent of this Technicals.

        Percentage of a shorted Shares  # noqa: E501

        :param short_percent: The short_percent of this Technicals.  # noqa: E501
        :type: float
        """

        self._short_percent = short_percent

    @property
    def short_ratio(self):
        """Gets the short_ratio of this Technicals.  # noqa: E501

        Ratio of shorted shares  # noqa: E501

        :return: The short_ratio of this Technicals.  # noqa: E501
        :rtype: float
        """
        return self._short_ratio

    @short_ratio.setter
    def short_ratio(self, short_ratio):
        """Sets the short_ratio of this Technicals.

        Ratio of shorted shares  # noqa: E501

        :param short_ratio: The short_ratio of this Technicals.  # noqa: E501
        :type: float
        """

        self._short_ratio = short_ratio

    @property
    def t_200_day_ma(self):
        """Gets the t_200_day_ma of this Technicals.  # noqa: E501

        200 days moving average  # noqa: E501

        :return: The t_200_day_ma of this Technicals.  # noqa: E501
        :rtype: float
        """
        return self._t_200_day_ma

    @t_200_day_ma.setter
    def t_200_day_ma(self, t_200_day_ma):
        """Sets the t_200_day_ma of this Technicals.

        200 days moving average  # noqa: E501

        :param t_200_day_ma: The t_200_day_ma of this Technicals.  # noqa: E501
        :type: float
        """

        self._t_200_day_ma = t_200_day_ma

    @property
    def t_50_day_ma(self):
        """Gets the t_50_day_ma of this Technicals.  # noqa: E501

        50 days moving average  # noqa: E501

        :return: The t_50_day_ma of this Technicals.  # noqa: E501
        :rtype: float
        """
        return self._t_50_day_ma

    @t_50_day_ma.setter
    def t_50_day_ma(self, t_50_day_ma):
        """Sets the t_50_day_ma of this Technicals.

        50 days moving average  # noqa: E501

        :param t_50_day_ma: The t_50_day_ma of this Technicals.  # noqa: E501
        :type: float
        """

        self._t_50_day_ma = t_50_day_ma

    @property
    def t_52_week_high(self):
        """Gets the t_52_week_high of this Technicals.  # noqa: E501

        52 week high  # noqa: E501

        :return: The t_52_week_high of this Technicals.  # noqa: E501
        :rtype: float
        """
        return self._t_52_week_high

    @t_52_week_high.setter
    def t_52_week_high(self, t_52_week_high):
        """Sets the t_52_week_high of this Technicals.

        52 week high  # noqa: E501

        :param t_52_week_high: The t_52_week_high of this Technicals.  # noqa: E501
        :type: float
        """

        self._t_52_week_high = t_52_week_high

    @property
    def t_52_week_low(self):
        """Gets the t_52_week_low of this Technicals.  # noqa: E501

        52 week low  # noqa: E501

        :return: The t_52_week_low of this Technicals.  # noqa: E501
        :rtype: float
        """
        return self._t_52_week_low

    @t_52_week_low.setter
    def t_52_week_low(self, t_52_week_low):
        """Sets the t_52_week_low of this Technicals.

        52 week low  # noqa: E501

        :param t_52_week_low: The t_52_week_low of this Technicals.  # noqa: E501
        :type: float
        """

        self._t_52_week_low = t_52_week_low

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Technicals):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Technicals):
            return True

        return self.to_dict() != other.to_dict()

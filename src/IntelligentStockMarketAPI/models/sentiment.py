# coding: utf-8

"""
    EOD STOCK API

     <h2>Intelligent EOD Stocks API</h2>     <p>     End of day stock world wide STOCK API, this api is intended for use by web application developers,      and service providers looking for up-to-date always available.     <ul>         <li>Exchange Information</li>         <li>Stock Tickers Data</li>         <li>End of Day (EOD) Stock Data</li>         <li>Fundamental Data</li>         <li>Stock Options And Splits Data</li>         <li>Financial News API</li>         <li>Social Media Trend Data For Stocks</li>         <li>Sentiment Analysis for News & Social Media</li>     </ul>                The information provided covers more than 150 000 tickers, stocks, mutual funds and more around the world.         we provide information for any period, including daily, weekly.     </p>    # noqa: E501

    The version of the OpenAPI document: v1
    Contact: support@eod-stock-api.site
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from src.IntelligentStockMarketAPI.configuration import Configuration


class Sentiment(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'created_at': 'str',
        'favourite_count': 'int',
        'retweet_count': 'int',
        'sentiment': 'str',
        'sentiment_id': 'str',
        'stock_code': 'str',
        'tweet_id': 'str',
        'tweet_link': 'str',
        'tweet_text': 'str',
        'uid': 'str'
    }

    attribute_map = {
        'created_at': 'created_at',
        'favourite_count': 'favourite_count',
        'retweet_count': 'retweet_count',
        'sentiment': 'sentiment',
        'sentiment_id': 'sentiment_id',
        'stock_code': 'stock_code',
        'tweet_id': 'tweet_id',
        'tweet_link': 'tweet_link',
        'tweet_text': 'tweet_text',
        'uid': 'uid'
    }

    def __init__(self, created_at=None, favourite_count=None, retweet_count=None, sentiment=None, sentiment_id=None, stock_code=None, tweet_id=None, tweet_link=None, tweet_text=None, uid=None, local_vars_configuration=None):  # noqa: E501
        """Sentiment - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._created_at = None
        self._favourite_count = None
        self._retweet_count = None
        self._sentiment = None
        self._sentiment_id = None
        self._stock_code = None
        self._tweet_id = None
        self._tweet_link = None
        self._tweet_text = None
        self._uid = None
        self.discriminator = None

        if created_at is not None:
            self.created_at = created_at
        if favourite_count is not None:
            self.favourite_count = favourite_count
        if retweet_count is not None:
            self.retweet_count = retweet_count
        if sentiment is not None:
            self.sentiment = sentiment
        if sentiment_id is not None:
            self.sentiment_id = sentiment_id
        if stock_code is not None:
            self.stock_code = stock_code
        if tweet_id is not None:
            self.tweet_id = tweet_id
        if tweet_link is not None:
            self.tweet_link = tweet_link
        if tweet_text is not None:
            self.tweet_text = tweet_text
        if uid is not None:
            self.uid = uid

    @property
    def created_at(self):
        """Gets the created_at of this Sentiment.  # noqa: E501


        :return: The created_at of this Sentiment.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Sentiment.


        :param created_at: The created_at of this Sentiment.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def favourite_count(self):
        """Gets the favourite_count of this Sentiment.  # noqa: E501


        :return: The favourite_count of this Sentiment.  # noqa: E501
        :rtype: int
        """
        return self._favourite_count

    @favourite_count.setter
    def favourite_count(self, favourite_count):
        """Sets the favourite_count of this Sentiment.


        :param favourite_count: The favourite_count of this Sentiment.  # noqa: E501
        :type: int
        """

        self._favourite_count = favourite_count

    @property
    def retweet_count(self):
        """Gets the retweet_count of this Sentiment.  # noqa: E501


        :return: The retweet_count of this Sentiment.  # noqa: E501
        :rtype: int
        """
        return self._retweet_count

    @retweet_count.setter
    def retweet_count(self, retweet_count):
        """Sets the retweet_count of this Sentiment.


        :param retweet_count: The retweet_count of this Sentiment.  # noqa: E501
        :type: int
        """

        self._retweet_count = retweet_count

    @property
    def sentiment(self):
        """Gets the sentiment of this Sentiment.  # noqa: E501


        :return: The sentiment of this Sentiment.  # noqa: E501
        :rtype: str
        """
        return self._sentiment

    @sentiment.setter
    def sentiment(self, sentiment):
        """Sets the sentiment of this Sentiment.


        :param sentiment: The sentiment of this Sentiment.  # noqa: E501
        :type: str
        """

        self._sentiment = sentiment

    @property
    def sentiment_id(self):
        """Gets the sentiment_id of this Sentiment.  # noqa: E501


        :return: The sentiment_id of this Sentiment.  # noqa: E501
        :rtype: str
        """
        return self._sentiment_id

    @sentiment_id.setter
    def sentiment_id(self, sentiment_id):
        """Sets the sentiment_id of this Sentiment.


        :param sentiment_id: The sentiment_id of this Sentiment.  # noqa: E501
        :type: str
        """

        self._sentiment_id = sentiment_id

    @property
    def stock_code(self):
        """Gets the stock_code of this Sentiment.  # noqa: E501


        :return: The stock_code of this Sentiment.  # noqa: E501
        :rtype: str
        """
        return self._stock_code

    @stock_code.setter
    def stock_code(self, stock_code):
        """Sets the stock_code of this Sentiment.


        :param stock_code: The stock_code of this Sentiment.  # noqa: E501
        :type: str
        """

        self._stock_code = stock_code

    @property
    def tweet_id(self):
        """Gets the tweet_id of this Sentiment.  # noqa: E501


        :return: The tweet_id of this Sentiment.  # noqa: E501
        :rtype: str
        """
        return self._tweet_id

    @tweet_id.setter
    def tweet_id(self, tweet_id):
        """Sets the tweet_id of this Sentiment.


        :param tweet_id: The tweet_id of this Sentiment.  # noqa: E501
        :type: str
        """

        self._tweet_id = tweet_id

    @property
    def tweet_link(self):
        """Gets the tweet_link of this Sentiment.  # noqa: E501


        :return: The tweet_link of this Sentiment.  # noqa: E501
        :rtype: str
        """
        return self._tweet_link

    @tweet_link.setter
    def tweet_link(self, tweet_link):
        """Sets the tweet_link of this Sentiment.


        :param tweet_link: The tweet_link of this Sentiment.  # noqa: E501
        :type: str
        """

        self._tweet_link = tweet_link

    @property
    def tweet_text(self):
        """Gets the tweet_text of this Sentiment.  # noqa: E501


        :return: The tweet_text of this Sentiment.  # noqa: E501
        :rtype: str
        """
        return self._tweet_text

    @tweet_text.setter
    def tweet_text(self, tweet_text):
        """Sets the tweet_text of this Sentiment.


        :param tweet_text: The tweet_text of this Sentiment.  # noqa: E501
        :type: str
        """

        self._tweet_text = tweet_text

    @property
    def uid(self):
        """Gets the uid of this Sentiment.  # noqa: E501


        :return: The uid of this Sentiment.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this Sentiment.


        :param uid: The uid of this Sentiment.  # noqa: E501
        :type: str
        """

        self._uid = uid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Sentiment):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Sentiment):
            return True

        return self.to_dict() != other.to_dict()

# coding: utf-8

"""
    EOD STOCK API

     <h2>Intelligent EOD Stocks API</h2>     <p>     End of day stock world wide STOCK API, this api is intended for use by web application developers,      and service providers looking for up-to-date always available.     <ul>         <li>Exchange Information</li>         <li>Stock Tickers Data</li>         <li>End of Day (EOD) Stock Data</li>         <li>Fundamental Data</li>         <li>Stock Options And Splits Data</li>         <li>Financial News API</li>         <li>Social Media Trend Data For Stocks</li>         <li>Sentiment Analysis for News & Social Media</li>     </ul>                The information provided covers more than 150 000 tickers, stocks, mutual funds and more around the world.         we provide information for any period, including daily, weekly.     </p>    # noqa: E501

    The version of the OpenAPI document: v1
    Contact: support@eod-stock-api.site
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from src.IntelligentStockMarketAPI.configuration import Configuration


class BalanceSheet(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'accounts_payable': 'float',
        'accumulated_amortization': 'float',
        'accumulated_depreciation': 'float',
        'accumulated_other_comprehensive_income': 'float',
        'additional_paid_in_capital': 'float',
        'balance_sheet_id': 'str',
        'capital_lease_obligations': 'float',
        'capital_surplus': 'float',
        'cash': 'float',
        'cash_and_short_term_investments': 'float',
        'common_stock': 'float',
        'common_stock_shares_outstanding': 'float',
        'common_stock_total_equity': 'float',
        'currency': 'str',
        'date': 'date',
        'deferred_long_term_liability': 'float',
        'earnings_assets': 'float',
        'fundamental_id': 'str',
        'good_will': 'float',
        'intangible_assets': 'float',
        'inventory': 'float',
        'long_term_debt': 'float',
        'long_term_debt_total': 'float',
        'long_term_investments': 'float',
        'negative_good_will': 'float',
        'net_debt': 'float',
        'net_invested_capital': 'float',
        'net_receivables': 'float',
        'net_tangible_assets': 'float',
        'networking_capital': 'float',
        'non_controlling_interest_in_consolidated_equity': 'float',
        'non_current_assets_other': 'float',
        'non_current_liabilities_other': 'float',
        'non_current_liabilities_total': 'float',
        'other_assets': 'float',
        'other_current_assets': 'float',
        'other_current_liability': 'float',
        'other_liability': 'float',
        'other_stock_holder_equity': 'float',
        'preferred_stock_redeemable': 'float',
        'preferred_stock_total_equity': 'float',
        'property_plant_and_equipment_gross': 'float',
        'property_plant_equipment': 'float',
        'retained_earnings': 'float',
        'retained_earnings_total_equity': 'float',
        'short_long_term_debt_total': 'float',
        'short_term_debt': 'float',
        'short_term_investments': 'float',
        'temporary_equity_redeemable_non_controlling_interests': 'float',
        'total_assets': 'float',
        'total_current_assets': 'float',
        'total_current_liabilities': 'float',
        'total_liability': 'float',
        'total_permanent_equity': 'float',
        'total_stock_holder_equity': 'float',
        'treasury_stock': 'float',
        'warrants': 'float'
    }

    attribute_map = {
        'accounts_payable': 'accounts_payable',
        'accumulated_amortization': 'accumulated_amortization',
        'accumulated_depreciation': 'accumulated_depreciation',
        'accumulated_other_comprehensive_income': 'accumulated_other_comprehensive_income',
        'additional_paid_in_capital': 'additional_paid_in_capital',
        'balance_sheet_id': 'balance_sheet_id',
        'capital_lease_obligations': 'capital_lease_obligations',
        'capital_surplus': 'capital_surplus',
        'cash': 'cash',
        'cash_and_short_term_investments': 'cash_and_short_term_investments',
        'common_stock': 'common_stock',
        'common_stock_shares_outstanding': 'common_stock_shares_outstanding',
        'common_stock_total_equity': 'common_stock_total_equity',
        'currency': 'currency',
        'date': 'date',
        'deferred_long_term_liability': 'deferred_long_term_liability',
        'earnings_assets': 'earnings_assets',
        'fundamental_id': 'fundamental_id',
        'good_will': 'good_will',
        'intangible_assets': 'intangible_assets',
        'inventory': 'inventory',
        'long_term_debt': 'long_term_debt',
        'long_term_debt_total': 'long_term_debt_total',
        'long_term_investments': 'long_term_investments',
        'negative_good_will': 'negative_good_will',
        'net_debt': 'net_debt',
        'net_invested_capital': 'net_invested_capital',
        'net_receivables': 'net_receivables',
        'net_tangible_assets': 'net_tangible_assets',
        'networking_capital': 'networking_capital',
        'non_controlling_interest_in_consolidated_equity': 'non_controlling_interest_in_consolidated_equity',
        'non_current_assets_other': 'non_current_assets_other',
        'non_current_liabilities_other': 'non_current_liabilities_other',
        'non_current_liabilities_total': 'non_current_liabilities_total',
        'other_assets': 'other_assets',
        'other_current_assets': 'other_current_assets',
        'other_current_liability': 'other_current_liability',
        'other_liability': 'other_liability',
        'other_stock_holder_equity': 'other_stock_holder_equity',
        'preferred_stock_redeemable': 'preferred_stock_redeemable',
        'preferred_stock_total_equity': 'preferred_stock_total_equity',
        'property_plant_and_equipment_gross': 'property_plant_and_equipment_gross',
        'property_plant_equipment': 'property_plant_equipment',
        'retained_earnings': 'retained_earnings',
        'retained_earnings_total_equity': 'retained_earnings_total_equity',
        'short_long_term_debt_total': 'short_long_term_debt_total',
        'short_term_debt': 'short_term_debt',
        'short_term_investments': 'short_term_investments',
        'temporary_equity_redeemable_non_controlling_interests': 'temporary_equity_redeemable_non_controlling_interests',
        'total_assets': 'total_assets',
        'total_current_assets': 'total_current_assets',
        'total_current_liabilities': 'total_current_liabilities',
        'total_liability': 'total_liability',
        'total_permanent_equity': 'total_permanent_equity',
        'total_stock_holder_equity': 'total_stock_holder_equity',
        'treasury_stock': 'treasury_stock',
        'warrants': 'warrants'
    }

    def __init__(self, accounts_payable=None, accumulated_amortization=None, accumulated_depreciation=None, accumulated_other_comprehensive_income=None, additional_paid_in_capital=None, balance_sheet_id=None, capital_lease_obligations=None, capital_surplus=None, cash=None, cash_and_short_term_investments=None, common_stock=None, common_stock_shares_outstanding=None, common_stock_total_equity=None, currency=None, date=None, deferred_long_term_liability=None, earnings_assets=None, fundamental_id=None, good_will=None, intangible_assets=None, inventory=None, long_term_debt=None, long_term_debt_total=None, long_term_investments=None, negative_good_will=None, net_debt=None, net_invested_capital=None, net_receivables=None, net_tangible_assets=None, networking_capital=None, non_controlling_interest_in_consolidated_equity=None, non_current_assets_other=None, non_current_liabilities_other=None, non_current_liabilities_total=None, other_assets=None, other_current_assets=None, other_current_liability=None, other_liability=None, other_stock_holder_equity=None, preferred_stock_redeemable=None, preferred_stock_total_equity=None, property_plant_and_equipment_gross=None, property_plant_equipment=None, retained_earnings=None, retained_earnings_total_equity=None, short_long_term_debt_total=None, short_term_debt=None, short_term_investments=None, temporary_equity_redeemable_non_controlling_interests=None, total_assets=None, total_current_assets=None, total_current_liabilities=None, total_liability=None, total_permanent_equity=None, total_stock_holder_equity=None, treasury_stock=None, warrants=None, local_vars_configuration=None):  # noqa: E501
        """BalanceSheet - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._accounts_payable = None
        self._accumulated_amortization = None
        self._accumulated_depreciation = None
        self._accumulated_other_comprehensive_income = None
        self._additional_paid_in_capital = None
        self._balance_sheet_id = None
        self._capital_lease_obligations = None
        self._capital_surplus = None
        self._cash = None
        self._cash_and_short_term_investments = None
        self._common_stock = None
        self._common_stock_shares_outstanding = None
        self._common_stock_total_equity = None
        self._currency = None
        self._date = None
        self._deferred_long_term_liability = None
        self._earnings_assets = None
        self._fundamental_id = None
        self._good_will = None
        self._intangible_assets = None
        self._inventory = None
        self._long_term_debt = None
        self._long_term_debt_total = None
        self._long_term_investments = None
        self._negative_good_will = None
        self._net_debt = None
        self._net_invested_capital = None
        self._net_receivables = None
        self._net_tangible_assets = None
        self._networking_capital = None
        self._non_controlling_interest_in_consolidated_equity = None
        self._non_current_assets_other = None
        self._non_current_liabilities_other = None
        self._non_current_liabilities_total = None
        self._other_assets = None
        self._other_current_assets = None
        self._other_current_liability = None
        self._other_liability = None
        self._other_stock_holder_equity = None
        self._preferred_stock_redeemable = None
        self._preferred_stock_total_equity = None
        self._property_plant_and_equipment_gross = None
        self._property_plant_equipment = None
        self._retained_earnings = None
        self._retained_earnings_total_equity = None
        self._short_long_term_debt_total = None
        self._short_term_debt = None
        self._short_term_investments = None
        self._temporary_equity_redeemable_non_controlling_interests = None
        self._total_assets = None
        self._total_current_assets = None
        self._total_current_liabilities = None
        self._total_liability = None
        self._total_permanent_equity = None
        self._total_stock_holder_equity = None
        self._treasury_stock = None
        self._warrants = None
        self.discriminator = None

        if accounts_payable is not None:
            self.accounts_payable = accounts_payable
        if accumulated_amortization is not None:
            self.accumulated_amortization = accumulated_amortization
        if accumulated_depreciation is not None:
            self.accumulated_depreciation = accumulated_depreciation
        if accumulated_other_comprehensive_income is not None:
            self.accumulated_other_comprehensive_income = accumulated_other_comprehensive_income
        if additional_paid_in_capital is not None:
            self.additional_paid_in_capital = additional_paid_in_capital
        if balance_sheet_id is not None:
            self.balance_sheet_id = balance_sheet_id
        if capital_lease_obligations is not None:
            self.capital_lease_obligations = capital_lease_obligations
        if capital_surplus is not None:
            self.capital_surplus = capital_surplus
        if cash is not None:
            self.cash = cash
        if cash_and_short_term_investments is not None:
            self.cash_and_short_term_investments = cash_and_short_term_investments
        if common_stock is not None:
            self.common_stock = common_stock
        if common_stock_shares_outstanding is not None:
            self.common_stock_shares_outstanding = common_stock_shares_outstanding
        if common_stock_total_equity is not None:
            self.common_stock_total_equity = common_stock_total_equity
        if currency is not None:
            self.currency = currency
        if date is not None:
            self.date = date
        if deferred_long_term_liability is not None:
            self.deferred_long_term_liability = deferred_long_term_liability
        if earnings_assets is not None:
            self.earnings_assets = earnings_assets
        if fundamental_id is not None:
            self.fundamental_id = fundamental_id
        if good_will is not None:
            self.good_will = good_will
        if intangible_assets is not None:
            self.intangible_assets = intangible_assets
        if inventory is not None:
            self.inventory = inventory
        if long_term_debt is not None:
            self.long_term_debt = long_term_debt
        if long_term_debt_total is not None:
            self.long_term_debt_total = long_term_debt_total
        if long_term_investments is not None:
            self.long_term_investments = long_term_investments
        if negative_good_will is not None:
            self.negative_good_will = negative_good_will
        if net_debt is not None:
            self.net_debt = net_debt
        if net_invested_capital is not None:
            self.net_invested_capital = net_invested_capital
        if net_receivables is not None:
            self.net_receivables = net_receivables
        if net_tangible_assets is not None:
            self.net_tangible_assets = net_tangible_assets
        if networking_capital is not None:
            self.networking_capital = networking_capital
        if non_controlling_interest_in_consolidated_equity is not None:
            self.non_controlling_interest_in_consolidated_equity = non_controlling_interest_in_consolidated_equity
        if non_current_assets_other is not None:
            self.non_current_assets_other = non_current_assets_other
        if non_current_liabilities_other is not None:
            self.non_current_liabilities_other = non_current_liabilities_other
        if non_current_liabilities_total is not None:
            self.non_current_liabilities_total = non_current_liabilities_total
        if other_assets is not None:
            self.other_assets = other_assets
        if other_current_assets is not None:
            self.other_current_assets = other_current_assets
        if other_current_liability is not None:
            self.other_current_liability = other_current_liability
        if other_liability is not None:
            self.other_liability = other_liability
        if other_stock_holder_equity is not None:
            self.other_stock_holder_equity = other_stock_holder_equity
        if preferred_stock_redeemable is not None:
            self.preferred_stock_redeemable = preferred_stock_redeemable
        if preferred_stock_total_equity is not None:
            self.preferred_stock_total_equity = preferred_stock_total_equity
        if property_plant_and_equipment_gross is not None:
            self.property_plant_and_equipment_gross = property_plant_and_equipment_gross
        if property_plant_equipment is not None:
            self.property_plant_equipment = property_plant_equipment
        if retained_earnings is not None:
            self.retained_earnings = retained_earnings
        if retained_earnings_total_equity is not None:
            self.retained_earnings_total_equity = retained_earnings_total_equity
        if short_long_term_debt_total is not None:
            self.short_long_term_debt_total = short_long_term_debt_total
        if short_term_debt is not None:
            self.short_term_debt = short_term_debt
        if short_term_investments is not None:
            self.short_term_investments = short_term_investments
        if temporary_equity_redeemable_non_controlling_interests is not None:
            self.temporary_equity_redeemable_non_controlling_interests = temporary_equity_redeemable_non_controlling_interests
        if total_assets is not None:
            self.total_assets = total_assets
        if total_current_assets is not None:
            self.total_current_assets = total_current_assets
        if total_current_liabilities is not None:
            self.total_current_liabilities = total_current_liabilities
        if total_liability is not None:
            self.total_liability = total_liability
        if total_permanent_equity is not None:
            self.total_permanent_equity = total_permanent_equity
        if total_stock_holder_equity is not None:
            self.total_stock_holder_equity = total_stock_holder_equity
        if treasury_stock is not None:
            self.treasury_stock = treasury_stock
        if warrants is not None:
            self.warrants = warrants

    @property
    def accounts_payable(self):
        """Gets the accounts_payable of this BalanceSheet.  # noqa: E501

        Accounts Payable (Float)  # noqa: E501

        :return: The accounts_payable of this BalanceSheet.  # noqa: E501
        :rtype: float
        """
        return self._accounts_payable

    @accounts_payable.setter
    def accounts_payable(self, accounts_payable):
        """Sets the accounts_payable of this BalanceSheet.

        Accounts Payable (Float)  # noqa: E501

        :param accounts_payable: The accounts_payable of this BalanceSheet.  # noqa: E501
        :type: float
        """

        self._accounts_payable = accounts_payable

    @property
    def accumulated_amortization(self):
        """Gets the accumulated_amortization of this BalanceSheet.  # noqa: E501

        Accumulated Amortization (Float)  # noqa: E501

        :return: The accumulated_amortization of this BalanceSheet.  # noqa: E501
        :rtype: float
        """
        return self._accumulated_amortization

    @accumulated_amortization.setter
    def accumulated_amortization(self, accumulated_amortization):
        """Sets the accumulated_amortization of this BalanceSheet.

        Accumulated Amortization (Float)  # noqa: E501

        :param accumulated_amortization: The accumulated_amortization of this BalanceSheet.  # noqa: E501
        :type: float
        """

        self._accumulated_amortization = accumulated_amortization

    @property
    def accumulated_depreciation(self):
        """Gets the accumulated_depreciation of this BalanceSheet.  # noqa: E501

        Accumulated Depreciation (Float)  # noqa: E501

        :return: The accumulated_depreciation of this BalanceSheet.  # noqa: E501
        :rtype: float
        """
        return self._accumulated_depreciation

    @accumulated_depreciation.setter
    def accumulated_depreciation(self, accumulated_depreciation):
        """Sets the accumulated_depreciation of this BalanceSheet.

        Accumulated Depreciation (Float)  # noqa: E501

        :param accumulated_depreciation: The accumulated_depreciation of this BalanceSheet.  # noqa: E501
        :type: float
        """

        self._accumulated_depreciation = accumulated_depreciation

    @property
    def accumulated_other_comprehensive_income(self):
        """Gets the accumulated_other_comprehensive_income of this BalanceSheet.  # noqa: E501

        Accumulated other comprehensive income (Float)  # noqa: E501

        :return: The accumulated_other_comprehensive_income of this BalanceSheet.  # noqa: E501
        :rtype: float
        """
        return self._accumulated_other_comprehensive_income

    @accumulated_other_comprehensive_income.setter
    def accumulated_other_comprehensive_income(self, accumulated_other_comprehensive_income):
        """Sets the accumulated_other_comprehensive_income of this BalanceSheet.

        Accumulated other comprehensive income (Float)  # noqa: E501

        :param accumulated_other_comprehensive_income: The accumulated_other_comprehensive_income of this BalanceSheet.  # noqa: E501
        :type: float
        """

        self._accumulated_other_comprehensive_income = accumulated_other_comprehensive_income

    @property
    def additional_paid_in_capital(self):
        """Gets the additional_paid_in_capital of this BalanceSheet.  # noqa: E501

        Additional paid capital (Float)  # noqa: E501

        :return: The additional_paid_in_capital of this BalanceSheet.  # noqa: E501
        :rtype: float
        """
        return self._additional_paid_in_capital

    @additional_paid_in_capital.setter
    def additional_paid_in_capital(self, additional_paid_in_capital):
        """Sets the additional_paid_in_capital of this BalanceSheet.

        Additional paid capital (Float)  # noqa: E501

        :param additional_paid_in_capital: The additional_paid_in_capital of this BalanceSheet.  # noqa: E501
        :type: float
        """

        self._additional_paid_in_capital = additional_paid_in_capital

    @property
    def balance_sheet_id(self):
        """Gets the balance_sheet_id of this BalanceSheet.  # noqa: E501

        unique balance sheet id  # noqa: E501

        :return: The balance_sheet_id of this BalanceSheet.  # noqa: E501
        :rtype: str
        """
        return self._balance_sheet_id

    @balance_sheet_id.setter
    def balance_sheet_id(self, balance_sheet_id):
        """Sets the balance_sheet_id of this BalanceSheet.

        unique balance sheet id  # noqa: E501

        :param balance_sheet_id: The balance_sheet_id of this BalanceSheet.  # noqa: E501
        :type: str
        """

        self._balance_sheet_id = balance_sheet_id

    @property
    def capital_lease_obligations(self):
        """Gets the capital_lease_obligations of this BalanceSheet.  # noqa: E501

        Capital Lease obligations (Float)  # noqa: E501

        :return: The capital_lease_obligations of this BalanceSheet.  # noqa: E501
        :rtype: float
        """
        return self._capital_lease_obligations

    @capital_lease_obligations.setter
    def capital_lease_obligations(self, capital_lease_obligations):
        """Sets the capital_lease_obligations of this BalanceSheet.

        Capital Lease obligations (Float)  # noqa: E501

        :param capital_lease_obligations: The capital_lease_obligations of this BalanceSheet.  # noqa: E501
        :type: float
        """

        self._capital_lease_obligations = capital_lease_obligations

    @property
    def capital_surplus(self):
        """Gets the capital_surplus of this BalanceSheet.  # noqa: E501

        Capital Surplus (Float)  # noqa: E501

        :return: The capital_surplus of this BalanceSheet.  # noqa: E501
        :rtype: float
        """
        return self._capital_surplus

    @capital_surplus.setter
    def capital_surplus(self, capital_surplus):
        """Sets the capital_surplus of this BalanceSheet.

        Capital Surplus (Float)  # noqa: E501

        :param capital_surplus: The capital_surplus of this BalanceSheet.  # noqa: E501
        :type: float
        """

        self._capital_surplus = capital_surplus

    @property
    def cash(self):
        """Gets the cash of this BalanceSheet.  # noqa: E501

        Cash (Float)  # noqa: E501

        :return: The cash of this BalanceSheet.  # noqa: E501
        :rtype: float
        """
        return self._cash

    @cash.setter
    def cash(self, cash):
        """Sets the cash of this BalanceSheet.

        Cash (Float)  # noqa: E501

        :param cash: The cash of this BalanceSheet.  # noqa: E501
        :type: float
        """

        self._cash = cash

    @property
    def cash_and_short_term_investments(self):
        """Gets the cash_and_short_term_investments of this BalanceSheet.  # noqa: E501

        Cash & Short term investments (Float)  # noqa: E501

        :return: The cash_and_short_term_investments of this BalanceSheet.  # noqa: E501
        :rtype: float
        """
        return self._cash_and_short_term_investments

    @cash_and_short_term_investments.setter
    def cash_and_short_term_investments(self, cash_and_short_term_investments):
        """Sets the cash_and_short_term_investments of this BalanceSheet.

        Cash & Short term investments (Float)  # noqa: E501

        :param cash_and_short_term_investments: The cash_and_short_term_investments of this BalanceSheet.  # noqa: E501
        :type: float
        """

        self._cash_and_short_term_investments = cash_and_short_term_investments

    @property
    def common_stock(self):
        """Gets the common_stock of this BalanceSheet.  # noqa: E501

        Common Stock (Float)  # noqa: E501

        :return: The common_stock of this BalanceSheet.  # noqa: E501
        :rtype: float
        """
        return self._common_stock

    @common_stock.setter
    def common_stock(self, common_stock):
        """Sets the common_stock of this BalanceSheet.

        Common Stock (Float)  # noqa: E501

        :param common_stock: The common_stock of this BalanceSheet.  # noqa: E501
        :type: float
        """

        self._common_stock = common_stock

    @property
    def common_stock_shares_outstanding(self):
        """Gets the common_stock_shares_outstanding of this BalanceSheet.  # noqa: E501

        Common Stock Shares Outstanding (Float)  # noqa: E501

        :return: The common_stock_shares_outstanding of this BalanceSheet.  # noqa: E501
        :rtype: float
        """
        return self._common_stock_shares_outstanding

    @common_stock_shares_outstanding.setter
    def common_stock_shares_outstanding(self, common_stock_shares_outstanding):
        """Sets the common_stock_shares_outstanding of this BalanceSheet.

        Common Stock Shares Outstanding (Float)  # noqa: E501

        :param common_stock_shares_outstanding: The common_stock_shares_outstanding of this BalanceSheet.  # noqa: E501
        :type: float
        """

        self._common_stock_shares_outstanding = common_stock_shares_outstanding

    @property
    def common_stock_total_equity(self):
        """Gets the common_stock_total_equity of this BalanceSheet.  # noqa: E501

        Common Stock total equity (Float)  # noqa: E501

        :return: The common_stock_total_equity of this BalanceSheet.  # noqa: E501
        :rtype: float
        """
        return self._common_stock_total_equity

    @common_stock_total_equity.setter
    def common_stock_total_equity(self, common_stock_total_equity):
        """Sets the common_stock_total_equity of this BalanceSheet.

        Common Stock total equity (Float)  # noqa: E501

        :param common_stock_total_equity: The common_stock_total_equity of this BalanceSheet.  # noqa: E501
        :type: float
        """

        self._common_stock_total_equity = common_stock_total_equity

    @property
    def currency(self):
        """Gets the currency of this BalanceSheet.  # noqa: E501

        currency code  # noqa: E501

        :return: The currency of this BalanceSheet.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this BalanceSheet.

        currency code  # noqa: E501

        :param currency: The currency of this BalanceSheet.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def date(self):
        """Gets the date of this BalanceSheet.  # noqa: E501

        date  # noqa: E501

        :return: The date of this BalanceSheet.  # noqa: E501
        :rtype: date
        """
        return self._date

    @date.setter
    def date(self, date):
        """Sets the date of this BalanceSheet.

        date  # noqa: E501

        :param date: The date of this BalanceSheet.  # noqa: E501
        :type: date
        """

        self._date = date

    @property
    def deferred_long_term_liability(self):
        """Gets the deferred_long_term_liability of this BalanceSheet.  # noqa: E501

        Deferred long term liability (Float)  # noqa: E501

        :return: The deferred_long_term_liability of this BalanceSheet.  # noqa: E501
        :rtype: float
        """
        return self._deferred_long_term_liability

    @deferred_long_term_liability.setter
    def deferred_long_term_liability(self, deferred_long_term_liability):
        """Sets the deferred_long_term_liability of this BalanceSheet.

        Deferred long term liability (Float)  # noqa: E501

        :param deferred_long_term_liability: The deferred_long_term_liability of this BalanceSheet.  # noqa: E501
        :type: float
        """

        self._deferred_long_term_liability = deferred_long_term_liability

    @property
    def earnings_assets(self):
        """Gets the earnings_assets of this BalanceSheet.  # noqa: E501

        Earnings Assets (Float)  # noqa: E501

        :return: The earnings_assets of this BalanceSheet.  # noqa: E501
        :rtype: float
        """
        return self._earnings_assets

    @earnings_assets.setter
    def earnings_assets(self, earnings_assets):
        """Sets the earnings_assets of this BalanceSheet.

        Earnings Assets (Float)  # noqa: E501

        :param earnings_assets: The earnings_assets of this BalanceSheet.  # noqa: E501
        :type: float
        """

        self._earnings_assets = earnings_assets

    @property
    def fundamental_id(self):
        """Gets the fundamental_id of this BalanceSheet.  # noqa: E501

        fundamental id  # noqa: E501

        :return: The fundamental_id of this BalanceSheet.  # noqa: E501
        :rtype: str
        """
        return self._fundamental_id

    @fundamental_id.setter
    def fundamental_id(self, fundamental_id):
        """Sets the fundamental_id of this BalanceSheet.

        fundamental id  # noqa: E501

        :param fundamental_id: The fundamental_id of this BalanceSheet.  # noqa: E501
        :type: str
        """

        self._fundamental_id = fundamental_id

    @property
    def good_will(self):
        """Gets the good_will of this BalanceSheet.  # noqa: E501

        Good Will (Float)  # noqa: E501

        :return: The good_will of this BalanceSheet.  # noqa: E501
        :rtype: float
        """
        return self._good_will

    @good_will.setter
    def good_will(self, good_will):
        """Sets the good_will of this BalanceSheet.

        Good Will (Float)  # noqa: E501

        :param good_will: The good_will of this BalanceSheet.  # noqa: E501
        :type: float
        """

        self._good_will = good_will

    @property
    def intangible_assets(self):
        """Gets the intangible_assets of this BalanceSheet.  # noqa: E501

        Intangible Assets (Float)  # noqa: E501

        :return: The intangible_assets of this BalanceSheet.  # noqa: E501
        :rtype: float
        """
        return self._intangible_assets

    @intangible_assets.setter
    def intangible_assets(self, intangible_assets):
        """Sets the intangible_assets of this BalanceSheet.

        Intangible Assets (Float)  # noqa: E501

        :param intangible_assets: The intangible_assets of this BalanceSheet.  # noqa: E501
        :type: float
        """

        self._intangible_assets = intangible_assets

    @property
    def inventory(self):
        """Gets the inventory of this BalanceSheet.  # noqa: E501

        Inventory Value (Float)  # noqa: E501

        :return: The inventory of this BalanceSheet.  # noqa: E501
        :rtype: float
        """
        return self._inventory

    @inventory.setter
    def inventory(self, inventory):
        """Sets the inventory of this BalanceSheet.

        Inventory Value (Float)  # noqa: E501

        :param inventory: The inventory of this BalanceSheet.  # noqa: E501
        :type: float
        """

        self._inventory = inventory

    @property
    def long_term_debt(self):
        """Gets the long_term_debt of this BalanceSheet.  # noqa: E501

        Long Term Debt (Float)  # noqa: E501

        :return: The long_term_debt of this BalanceSheet.  # noqa: E501
        :rtype: float
        """
        return self._long_term_debt

    @long_term_debt.setter
    def long_term_debt(self, long_term_debt):
        """Sets the long_term_debt of this BalanceSheet.

        Long Term Debt (Float)  # noqa: E501

        :param long_term_debt: The long_term_debt of this BalanceSheet.  # noqa: E501
        :type: float
        """

        self._long_term_debt = long_term_debt

    @property
    def long_term_debt_total(self):
        """Gets the long_term_debt_total of this BalanceSheet.  # noqa: E501

        Long term debt total (Float)  # noqa: E501

        :return: The long_term_debt_total of this BalanceSheet.  # noqa: E501
        :rtype: float
        """
        return self._long_term_debt_total

    @long_term_debt_total.setter
    def long_term_debt_total(self, long_term_debt_total):
        """Sets the long_term_debt_total of this BalanceSheet.

        Long term debt total (Float)  # noqa: E501

        :param long_term_debt_total: The long_term_debt_total of this BalanceSheet.  # noqa: E501
        :type: float
        """

        self._long_term_debt_total = long_term_debt_total

    @property
    def long_term_investments(self):
        """Gets the long_term_investments of this BalanceSheet.  # noqa: E501

        Long Term Investments (Float)  # noqa: E501

        :return: The long_term_investments of this BalanceSheet.  # noqa: E501
        :rtype: float
        """
        return self._long_term_investments

    @long_term_investments.setter
    def long_term_investments(self, long_term_investments):
        """Sets the long_term_investments of this BalanceSheet.

        Long Term Investments (Float)  # noqa: E501

        :param long_term_investments: The long_term_investments of this BalanceSheet.  # noqa: E501
        :type: float
        """

        self._long_term_investments = long_term_investments

    @property
    def negative_good_will(self):
        """Gets the negative_good_will of this BalanceSheet.  # noqa: E501

        Negative good will (Float)  # noqa: E501

        :return: The negative_good_will of this BalanceSheet.  # noqa: E501
        :rtype: float
        """
        return self._negative_good_will

    @negative_good_will.setter
    def negative_good_will(self, negative_good_will):
        """Sets the negative_good_will of this BalanceSheet.

        Negative good will (Float)  # noqa: E501

        :param negative_good_will: The negative_good_will of this BalanceSheet.  # noqa: E501
        :type: float
        """

        self._negative_good_will = negative_good_will

    @property
    def net_debt(self):
        """Gets the net_debt of this BalanceSheet.  # noqa: E501

        Net Debt (Float)  # noqa: E501

        :return: The net_debt of this BalanceSheet.  # noqa: E501
        :rtype: float
        """
        return self._net_debt

    @net_debt.setter
    def net_debt(self, net_debt):
        """Sets the net_debt of this BalanceSheet.

        Net Debt (Float)  # noqa: E501

        :param net_debt: The net_debt of this BalanceSheet.  # noqa: E501
        :type: float
        """

        self._net_debt = net_debt

    @property
    def net_invested_capital(self):
        """Gets the net_invested_capital of this BalanceSheet.  # noqa: E501

        Net Invested Capital (Float)  # noqa: E501

        :return: The net_invested_capital of this BalanceSheet.  # noqa: E501
        :rtype: float
        """
        return self._net_invested_capital

    @net_invested_capital.setter
    def net_invested_capital(self, net_invested_capital):
        """Sets the net_invested_capital of this BalanceSheet.

        Net Invested Capital (Float)  # noqa: E501

        :param net_invested_capital: The net_invested_capital of this BalanceSheet.  # noqa: E501
        :type: float
        """

        self._net_invested_capital = net_invested_capital

    @property
    def net_receivables(self):
        """Gets the net_receivables of this BalanceSheet.  # noqa: E501

        Net Receivables (Float)  # noqa: E501

        :return: The net_receivables of this BalanceSheet.  # noqa: E501
        :rtype: float
        """
        return self._net_receivables

    @net_receivables.setter
    def net_receivables(self, net_receivables):
        """Sets the net_receivables of this BalanceSheet.

        Net Receivables (Float)  # noqa: E501

        :param net_receivables: The net_receivables of this BalanceSheet.  # noqa: E501
        :type: float
        """

        self._net_receivables = net_receivables

    @property
    def net_tangible_assets(self):
        """Gets the net_tangible_assets of this BalanceSheet.  # noqa: E501

        Net Tangible Assets (Float)  # noqa: E501

        :return: The net_tangible_assets of this BalanceSheet.  # noqa: E501
        :rtype: float
        """
        return self._net_tangible_assets

    @net_tangible_assets.setter
    def net_tangible_assets(self, net_tangible_assets):
        """Sets the net_tangible_assets of this BalanceSheet.

        Net Tangible Assets (Float)  # noqa: E501

        :param net_tangible_assets: The net_tangible_assets of this BalanceSheet.  # noqa: E501
        :type: float
        """

        self._net_tangible_assets = net_tangible_assets

    @property
    def networking_capital(self):
        """Gets the networking_capital of this BalanceSheet.  # noqa: E501

        Networking Capital (Float)  # noqa: E501

        :return: The networking_capital of this BalanceSheet.  # noqa: E501
        :rtype: float
        """
        return self._networking_capital

    @networking_capital.setter
    def networking_capital(self, networking_capital):
        """Sets the networking_capital of this BalanceSheet.

        Networking Capital (Float)  # noqa: E501

        :param networking_capital: The networking_capital of this BalanceSheet.  # noqa: E501
        :type: float
        """

        self._networking_capital = networking_capital

    @property
    def non_controlling_interest_in_consolidated_equity(self):
        """Gets the non_controlling_interest_in_consolidated_equity of this BalanceSheet.  # noqa: E501

        Non Controlling Interest in consolidated equity (Float)  # noqa: E501

        :return: The non_controlling_interest_in_consolidated_equity of this BalanceSheet.  # noqa: E501
        :rtype: float
        """
        return self._non_controlling_interest_in_consolidated_equity

    @non_controlling_interest_in_consolidated_equity.setter
    def non_controlling_interest_in_consolidated_equity(self, non_controlling_interest_in_consolidated_equity):
        """Sets the non_controlling_interest_in_consolidated_equity of this BalanceSheet.

        Non Controlling Interest in consolidated equity (Float)  # noqa: E501

        :param non_controlling_interest_in_consolidated_equity: The non_controlling_interest_in_consolidated_equity of this BalanceSheet.  # noqa: E501
        :type: float
        """

        self._non_controlling_interest_in_consolidated_equity = non_controlling_interest_in_consolidated_equity

    @property
    def non_current_assets_other(self):
        """Gets the non_current_assets_other of this BalanceSheet.  # noqa: E501

        Non Current Assets Other (Float)  # noqa: E501

        :return: The non_current_assets_other of this BalanceSheet.  # noqa: E501
        :rtype: float
        """
        return self._non_current_assets_other

    @non_current_assets_other.setter
    def non_current_assets_other(self, non_current_assets_other):
        """Sets the non_current_assets_other of this BalanceSheet.

        Non Current Assets Other (Float)  # noqa: E501

        :param non_current_assets_other: The non_current_assets_other of this BalanceSheet.  # noqa: E501
        :type: float
        """

        self._non_current_assets_other = non_current_assets_other

    @property
    def non_current_liabilities_other(self):
        """Gets the non_current_liabilities_other of this BalanceSheet.  # noqa: E501

        Non Current liabilities Other (Float)  # noqa: E501

        :return: The non_current_liabilities_other of this BalanceSheet.  # noqa: E501
        :rtype: float
        """
        return self._non_current_liabilities_other

    @non_current_liabilities_other.setter
    def non_current_liabilities_other(self, non_current_liabilities_other):
        """Sets the non_current_liabilities_other of this BalanceSheet.

        Non Current liabilities Other (Float)  # noqa: E501

        :param non_current_liabilities_other: The non_current_liabilities_other of this BalanceSheet.  # noqa: E501
        :type: float
        """

        self._non_current_liabilities_other = non_current_liabilities_other

    @property
    def non_current_liabilities_total(self):
        """Gets the non_current_liabilities_total of this BalanceSheet.  # noqa: E501

        Non Current liabilities Total (Float)  # noqa: E501

        :return: The non_current_liabilities_total of this BalanceSheet.  # noqa: E501
        :rtype: float
        """
        return self._non_current_liabilities_total

    @non_current_liabilities_total.setter
    def non_current_liabilities_total(self, non_current_liabilities_total):
        """Sets the non_current_liabilities_total of this BalanceSheet.

        Non Current liabilities Total (Float)  # noqa: E501

        :param non_current_liabilities_total: The non_current_liabilities_total of this BalanceSheet.  # noqa: E501
        :type: float
        """

        self._non_current_liabilities_total = non_current_liabilities_total

    @property
    def other_assets(self):
        """Gets the other_assets of this BalanceSheet.  # noqa: E501

        Other Assets (Float)  # noqa: E501

        :return: The other_assets of this BalanceSheet.  # noqa: E501
        :rtype: float
        """
        return self._other_assets

    @other_assets.setter
    def other_assets(self, other_assets):
        """Sets the other_assets of this BalanceSheet.

        Other Assets (Float)  # noqa: E501

        :param other_assets: The other_assets of this BalanceSheet.  # noqa: E501
        :type: float
        """

        self._other_assets = other_assets

    @property
    def other_current_assets(self):
        """Gets the other_current_assets of this BalanceSheet.  # noqa: E501

        Other Currency Assets (Float)  # noqa: E501

        :return: The other_current_assets of this BalanceSheet.  # noqa: E501
        :rtype: float
        """
        return self._other_current_assets

    @other_current_assets.setter
    def other_current_assets(self, other_current_assets):
        """Sets the other_current_assets of this BalanceSheet.

        Other Currency Assets (Float)  # noqa: E501

        :param other_current_assets: The other_current_assets of this BalanceSheet.  # noqa: E501
        :type: float
        """

        self._other_current_assets = other_current_assets

    @property
    def other_current_liability(self):
        """Gets the other_current_liability of this BalanceSheet.  # noqa: E501

        Other Current Liability (Float)  # noqa: E501

        :return: The other_current_liability of this BalanceSheet.  # noqa: E501
        :rtype: float
        """
        return self._other_current_liability

    @other_current_liability.setter
    def other_current_liability(self, other_current_liability):
        """Sets the other_current_liability of this BalanceSheet.

        Other Current Liability (Float)  # noqa: E501

        :param other_current_liability: The other_current_liability of this BalanceSheet.  # noqa: E501
        :type: float
        """

        self._other_current_liability = other_current_liability

    @property
    def other_liability(self):
        """Gets the other_liability of this BalanceSheet.  # noqa: E501

        Other Liability (Float)  # noqa: E501

        :return: The other_liability of this BalanceSheet.  # noqa: E501
        :rtype: float
        """
        return self._other_liability

    @other_liability.setter
    def other_liability(self, other_liability):
        """Sets the other_liability of this BalanceSheet.

        Other Liability (Float)  # noqa: E501

        :param other_liability: The other_liability of this BalanceSheet.  # noqa: E501
        :type: float
        """

        self._other_liability = other_liability

    @property
    def other_stock_holder_equity(self):
        """Gets the other_stock_holder_equity of this BalanceSheet.  # noqa: E501

        Other Stock Holder Equity (Float)  # noqa: E501

        :return: The other_stock_holder_equity of this BalanceSheet.  # noqa: E501
        :rtype: float
        """
        return self._other_stock_holder_equity

    @other_stock_holder_equity.setter
    def other_stock_holder_equity(self, other_stock_holder_equity):
        """Sets the other_stock_holder_equity of this BalanceSheet.

        Other Stock Holder Equity (Float)  # noqa: E501

        :param other_stock_holder_equity: The other_stock_holder_equity of this BalanceSheet.  # noqa: E501
        :type: float
        """

        self._other_stock_holder_equity = other_stock_holder_equity

    @property
    def preferred_stock_redeemable(self):
        """Gets the preferred_stock_redeemable of this BalanceSheet.  # noqa: E501

        Preferred Stock redeemable (Float)  # noqa: E501

        :return: The preferred_stock_redeemable of this BalanceSheet.  # noqa: E501
        :rtype: float
        """
        return self._preferred_stock_redeemable

    @preferred_stock_redeemable.setter
    def preferred_stock_redeemable(self, preferred_stock_redeemable):
        """Sets the preferred_stock_redeemable of this BalanceSheet.

        Preferred Stock redeemable (Float)  # noqa: E501

        :param preferred_stock_redeemable: The preferred_stock_redeemable of this BalanceSheet.  # noqa: E501
        :type: float
        """

        self._preferred_stock_redeemable = preferred_stock_redeemable

    @property
    def preferred_stock_total_equity(self):
        """Gets the preferred_stock_total_equity of this BalanceSheet.  # noqa: E501

        Preferred Stock total equity (Float)  # noqa: E501

        :return: The preferred_stock_total_equity of this BalanceSheet.  # noqa: E501
        :rtype: float
        """
        return self._preferred_stock_total_equity

    @preferred_stock_total_equity.setter
    def preferred_stock_total_equity(self, preferred_stock_total_equity):
        """Sets the preferred_stock_total_equity of this BalanceSheet.

        Preferred Stock total equity (Float)  # noqa: E501

        :param preferred_stock_total_equity: The preferred_stock_total_equity of this BalanceSheet.  # noqa: E501
        :type: float
        """

        self._preferred_stock_total_equity = preferred_stock_total_equity

    @property
    def property_plant_and_equipment_gross(self):
        """Gets the property_plant_and_equipment_gross of this BalanceSheet.  # noqa: E501

        Property plant & Equipment Gross (Float)  # noqa: E501

        :return: The property_plant_and_equipment_gross of this BalanceSheet.  # noqa: E501
        :rtype: float
        """
        return self._property_plant_and_equipment_gross

    @property_plant_and_equipment_gross.setter
    def property_plant_and_equipment_gross(self, property_plant_and_equipment_gross):
        """Sets the property_plant_and_equipment_gross of this BalanceSheet.

        Property plant & Equipment Gross (Float)  # noqa: E501

        :param property_plant_and_equipment_gross: The property_plant_and_equipment_gross of this BalanceSheet.  # noqa: E501
        :type: float
        """

        self._property_plant_and_equipment_gross = property_plant_and_equipment_gross

    @property
    def property_plant_equipment(self):
        """Gets the property_plant_equipment of this BalanceSheet.  # noqa: E501

        Property Plant Equipment (Float)  # noqa: E501

        :return: The property_plant_equipment of this BalanceSheet.  # noqa: E501
        :rtype: float
        """
        return self._property_plant_equipment

    @property_plant_equipment.setter
    def property_plant_equipment(self, property_plant_equipment):
        """Sets the property_plant_equipment of this BalanceSheet.

        Property Plant Equipment (Float)  # noqa: E501

        :param property_plant_equipment: The property_plant_equipment of this BalanceSheet.  # noqa: E501
        :type: float
        """

        self._property_plant_equipment = property_plant_equipment

    @property
    def retained_earnings(self):
        """Gets the retained_earnings of this BalanceSheet.  # noqa: E501

        Retained Earnings (Float)  # noqa: E501

        :return: The retained_earnings of this BalanceSheet.  # noqa: E501
        :rtype: float
        """
        return self._retained_earnings

    @retained_earnings.setter
    def retained_earnings(self, retained_earnings):
        """Sets the retained_earnings of this BalanceSheet.

        Retained Earnings (Float)  # noqa: E501

        :param retained_earnings: The retained_earnings of this BalanceSheet.  # noqa: E501
        :type: float
        """

        self._retained_earnings = retained_earnings

    @property
    def retained_earnings_total_equity(self):
        """Gets the retained_earnings_total_equity of this BalanceSheet.  # noqa: E501

        Retained Earnings total equity (Float)  # noqa: E501

        :return: The retained_earnings_total_equity of this BalanceSheet.  # noqa: E501
        :rtype: float
        """
        return self._retained_earnings_total_equity

    @retained_earnings_total_equity.setter
    def retained_earnings_total_equity(self, retained_earnings_total_equity):
        """Sets the retained_earnings_total_equity of this BalanceSheet.

        Retained Earnings total equity (Float)  # noqa: E501

        :param retained_earnings_total_equity: The retained_earnings_total_equity of this BalanceSheet.  # noqa: E501
        :type: float
        """

        self._retained_earnings_total_equity = retained_earnings_total_equity

    @property
    def short_long_term_debt_total(self):
        """Gets the short_long_term_debt_total of this BalanceSheet.  # noqa: E501

        Short & Long Term Debt Total (Float)  # noqa: E501

        :return: The short_long_term_debt_total of this BalanceSheet.  # noqa: E501
        :rtype: float
        """
        return self._short_long_term_debt_total

    @short_long_term_debt_total.setter
    def short_long_term_debt_total(self, short_long_term_debt_total):
        """Sets the short_long_term_debt_total of this BalanceSheet.

        Short & Long Term Debt Total (Float)  # noqa: E501

        :param short_long_term_debt_total: The short_long_term_debt_total of this BalanceSheet.  # noqa: E501
        :type: float
        """

        self._short_long_term_debt_total = short_long_term_debt_total

    @property
    def short_term_debt(self):
        """Gets the short_term_debt of this BalanceSheet.  # noqa: E501

        Short Term Debt (Float)  # noqa: E501

        :return: The short_term_debt of this BalanceSheet.  # noqa: E501
        :rtype: float
        """
        return self._short_term_debt

    @short_term_debt.setter
    def short_term_debt(self, short_term_debt):
        """Sets the short_term_debt of this BalanceSheet.

        Short Term Debt (Float)  # noqa: E501

        :param short_term_debt: The short_term_debt of this BalanceSheet.  # noqa: E501
        :type: float
        """

        self._short_term_debt = short_term_debt

    @property
    def short_term_investments(self):
        """Gets the short_term_investments of this BalanceSheet.  # noqa: E501

        Short Term Investments (Float)  # noqa: E501

        :return: The short_term_investments of this BalanceSheet.  # noqa: E501
        :rtype: float
        """
        return self._short_term_investments

    @short_term_investments.setter
    def short_term_investments(self, short_term_investments):
        """Sets the short_term_investments of this BalanceSheet.

        Short Term Investments (Float)  # noqa: E501

        :param short_term_investments: The short_term_investments of this BalanceSheet.  # noqa: E501
        :type: float
        """

        self._short_term_investments = short_term_investments

    @property
    def temporary_equity_redeemable_non_controlling_interests(self):
        """Gets the temporary_equity_redeemable_non_controlling_interests of this BalanceSheet.  # noqa: E501

        temporary equity redeemable non controlling interests (Float)  # noqa: E501

        :return: The temporary_equity_redeemable_non_controlling_interests of this BalanceSheet.  # noqa: E501
        :rtype: float
        """
        return self._temporary_equity_redeemable_non_controlling_interests

    @temporary_equity_redeemable_non_controlling_interests.setter
    def temporary_equity_redeemable_non_controlling_interests(self, temporary_equity_redeemable_non_controlling_interests):
        """Sets the temporary_equity_redeemable_non_controlling_interests of this BalanceSheet.

        temporary equity redeemable non controlling interests (Float)  # noqa: E501

        :param temporary_equity_redeemable_non_controlling_interests: The temporary_equity_redeemable_non_controlling_interests of this BalanceSheet.  # noqa: E501
        :type: float
        """

        self._temporary_equity_redeemable_non_controlling_interests = temporary_equity_redeemable_non_controlling_interests

    @property
    def total_assets(self):
        """Gets the total_assets of this BalanceSheet.  # noqa: E501

        Total Assets (Float)  # noqa: E501

        :return: The total_assets of this BalanceSheet.  # noqa: E501
        :rtype: float
        """
        return self._total_assets

    @total_assets.setter
    def total_assets(self, total_assets):
        """Sets the total_assets of this BalanceSheet.

        Total Assets (Float)  # noqa: E501

        :param total_assets: The total_assets of this BalanceSheet.  # noqa: E501
        :type: float
        """

        self._total_assets = total_assets

    @property
    def total_current_assets(self):
        """Gets the total_current_assets of this BalanceSheet.  # noqa: E501

        Total Current Assets (Float)  # noqa: E501

        :return: The total_current_assets of this BalanceSheet.  # noqa: E501
        :rtype: float
        """
        return self._total_current_assets

    @total_current_assets.setter
    def total_current_assets(self, total_current_assets):
        """Sets the total_current_assets of this BalanceSheet.

        Total Current Assets (Float)  # noqa: E501

        :param total_current_assets: The total_current_assets of this BalanceSheet.  # noqa: E501
        :type: float
        """

        self._total_current_assets = total_current_assets

    @property
    def total_current_liabilities(self):
        """Gets the total_current_liabilities of this BalanceSheet.  # noqa: E501

        Total Current Liabilities (Float)  # noqa: E501

        :return: The total_current_liabilities of this BalanceSheet.  # noqa: E501
        :rtype: float
        """
        return self._total_current_liabilities

    @total_current_liabilities.setter
    def total_current_liabilities(self, total_current_liabilities):
        """Sets the total_current_liabilities of this BalanceSheet.

        Total Current Liabilities (Float)  # noqa: E501

        :param total_current_liabilities: The total_current_liabilities of this BalanceSheet.  # noqa: E501
        :type: float
        """

        self._total_current_liabilities = total_current_liabilities

    @property
    def total_liability(self):
        """Gets the total_liability of this BalanceSheet.  # noqa: E501

        Total Liability (Float)  # noqa: E501

        :return: The total_liability of this BalanceSheet.  # noqa: E501
        :rtype: float
        """
        return self._total_liability

    @total_liability.setter
    def total_liability(self, total_liability):
        """Sets the total_liability of this BalanceSheet.

        Total Liability (Float)  # noqa: E501

        :param total_liability: The total_liability of this BalanceSheet.  # noqa: E501
        :type: float
        """

        self._total_liability = total_liability

    @property
    def total_permanent_equity(self):
        """Gets the total_permanent_equity of this BalanceSheet.  # noqa: E501

        Total Permanent Equity (Float)  # noqa: E501

        :return: The total_permanent_equity of this BalanceSheet.  # noqa: E501
        :rtype: float
        """
        return self._total_permanent_equity

    @total_permanent_equity.setter
    def total_permanent_equity(self, total_permanent_equity):
        """Sets the total_permanent_equity of this BalanceSheet.

        Total Permanent Equity (Float)  # noqa: E501

        :param total_permanent_equity: The total_permanent_equity of this BalanceSheet.  # noqa: E501
        :type: float
        """

        self._total_permanent_equity = total_permanent_equity

    @property
    def total_stock_holder_equity(self):
        """Gets the total_stock_holder_equity of this BalanceSheet.  # noqa: E501

        Total Stock Holder Equity (Float)  # noqa: E501

        :return: The total_stock_holder_equity of this BalanceSheet.  # noqa: E501
        :rtype: float
        """
        return self._total_stock_holder_equity

    @total_stock_holder_equity.setter
    def total_stock_holder_equity(self, total_stock_holder_equity):
        """Sets the total_stock_holder_equity of this BalanceSheet.

        Total Stock Holder Equity (Float)  # noqa: E501

        :param total_stock_holder_equity: The total_stock_holder_equity of this BalanceSheet.  # noqa: E501
        :type: float
        """

        self._total_stock_holder_equity = total_stock_holder_equity

    @property
    def treasury_stock(self):
        """Gets the treasury_stock of this BalanceSheet.  # noqa: E501

        Treasury Stock (Float)  # noqa: E501

        :return: The treasury_stock of this BalanceSheet.  # noqa: E501
        :rtype: float
        """
        return self._treasury_stock

    @treasury_stock.setter
    def treasury_stock(self, treasury_stock):
        """Sets the treasury_stock of this BalanceSheet.

        Treasury Stock (Float)  # noqa: E501

        :param treasury_stock: The treasury_stock of this BalanceSheet.  # noqa: E501
        :type: float
        """

        self._treasury_stock = treasury_stock

    @property
    def warrants(self):
        """Gets the warrants of this BalanceSheet.  # noqa: E501

        Warrants (Float)  # noqa: E501

        :return: The warrants of this BalanceSheet.  # noqa: E501
        :rtype: float
        """
        return self._warrants

    @warrants.setter
    def warrants(self, warrants):
        """Sets the warrants of this BalanceSheet.

        Warrants (Float)  # noqa: E501

        :param warrants: The warrants of this BalanceSheet.  # noqa: E501
        :type: float
        """

        self._warrants = warrants

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BalanceSheet):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BalanceSheet):
            return True

        return self.to_dict() != other.to_dict()

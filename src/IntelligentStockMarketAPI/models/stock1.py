# coding: utf-8

"""
    EOD STOCK API

     <h2>Intelligent EOD Stocks API</h2>     <p>     End of day stock world wide STOCK API, this api is intended for use by web application developers,      and service providers looking for up-to-date always available.     <ul>         <li>Exchange Information</li>         <li>Stock Tickers Data</li>         <li>End of Day (EOD) Stock Data</li>         <li>Fundamental Data</li>         <li>Stock Options And Splits Data</li>         <li>Financial News API</li>         <li>Social Media Trend Data For Stocks</li>         <li>Sentiment Analysis for News & Social Media</li>     </ul>                The information provided covers more than 150 000 tickers, stocks, mutual funds and more around the world.         we provide information for any period, including daily, weekly.     </p>    # noqa: E501

    The version of the OpenAPI document: v1
    Contact: support@eod-stock-api.site
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from src.IntelligentStockMarketAPI.configuration import Configuration


class Stock1(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'code': 'str',
        'currency': 'str',
        'exchange_code': 'str',
        'name': 'str',
        'stock_type': 'str'
    }

    attribute_map = {
        'code': 'code',
        'currency': 'currency',
        'exchange_code': 'exchange_code',
        'name': 'name',
        'stock_type': 'stock_type'
    }

    def __init__(self, code=None, currency=None, exchange_code=None, name=None, stock_type=None, local_vars_configuration=None):  # noqa: E501
        """Stock1 - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._code = None
        self._currency = None
        self._exchange_code = None
        self._name = None
        self._stock_type = None
        self.discriminator = None

        if code is not None:
            self.code = code
        if currency is not None:
            self.currency = currency
        if exchange_code is not None:
            self.exchange_code = exchange_code
        if name is not None:
            self.name = name
        if stock_type is not None:
            self.stock_type = stock_type

    @property
    def code(self):
        """Gets the code of this Stock1.  # noqa: E501

        The Code of the stock in exchange_code  # noqa: E501

        :return: The code of this Stock1.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Stock1.

        The Code of the stock in exchange_code  # noqa: E501

        :param code: The code of this Stock1.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def currency(self):
        """Gets the currency of this Stock1.  # noqa: E501

        The Currency of the stock as listed in exchange_code  # noqa: E501

        :return: The currency of this Stock1.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Stock1.

        The Currency of the stock as listed in exchange_code  # noqa: E501

        :param currency: The currency of this Stock1.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def exchange_code(self):
        """Gets the exchange_code of this Stock1.  # noqa: E501

        The name of the exchange_code this stock is listed in  # noqa: E501

        :return: The exchange_code of this Stock1.  # noqa: E501
        :rtype: str
        """
        return self._exchange_code

    @exchange_code.setter
    def exchange_code(self, exchange_code):
        """Sets the exchange_code of this Stock1.

        The name of the exchange_code this stock is listed in  # noqa: E501

        :param exchange_code: The exchange_code of this Stock1.  # noqa: E501
        :type: str
        """

        self._exchange_code = exchange_code

    @property
    def name(self):
        """Gets the name of this Stock1.  # noqa: E501

        Name of stock  # noqa: E501

        :return: The name of this Stock1.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Stock1.

        Name of stock  # noqa: E501

        :param name: The name of this Stock1.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def stock_type(self):
        """Gets the stock_type of this Stock1.  # noqa: E501

        The type of stock as listed in exchange_code  # noqa: E501

        :return: The stock_type of this Stock1.  # noqa: E501
        :rtype: str
        """
        return self._stock_type

    @stock_type.setter
    def stock_type(self, stock_type):
        """Sets the stock_type of this Stock1.

        The type of stock as listed in exchange_code  # noqa: E501

        :param stock_type: The stock_type of this Stock1.  # noqa: E501
        :type: str
        """

        self._stock_type = stock_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Stock1):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Stock1):
            return True

        return self.to_dict() != other.to_dict()

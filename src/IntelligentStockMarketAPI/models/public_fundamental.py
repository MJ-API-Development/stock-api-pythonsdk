# coding: utf-8

"""
    EOD STOCK API

     <h2>Intelligent EOD Stocks API</h2>     <p>     End of day stock world wide STOCK API, this api is intended for use by web application developers,      and service providers looking for up-to-date always available.     <ul>         <li>Exchange Information</li>         <li>Stock Tickers Data</li>         <li>End of Day (EOD) Stock Data</li>         <li>Fundamental Data</li>         <li>Stock Options And Splits Data</li>         <li>Financial News API</li>         <li>Social Media Trend Data For Stocks</li>         <li>Sentiment Analysis for News & Social Media</li>     </ul>                The information provided covers more than 150 000 tickers, stocks, mutual funds and more around the world.         we provide information for any period, including daily, weekly.     </p>    # noqa: E501

    The version of the OpenAPI document: v1
    Contact: support@eod-stock-api.site
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from src.IntelligentStockMarketAPI.configuration import Configuration


class PublicFundamental(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'address': 'GeneralAddress',
        'analyst_rankings': 'Analyst',
        'balance_sheets': 'BalanceSheets',
        'cik': 'str',
        'contact': 'GeneralContact',
        'country_name': 'str',
        'currency': 'str',
        'cusip': 'str',
        'description': 'str',
        'employer_id': 'str',
        'exchange': 'str',
        'fiscal_year_end': 'date',
        'fundamental_id': 'str',
        'gic_group': 'str',
        'gic_industry': 'str',
        'gic_sector': 'str',
        'highlights': 'Highlights',
        'home_category': 'str',
        'industry': 'str',
        'international_domestic': 'bool',
        'ipo_date': 'date',
        'is_delisted': 'bool',
        'isin': 'str',
        'listings': 'GeneralListings',
        'name': 'str',
        'officers': 'GeneralOfficers',
        'sector': 'str',
        'share_stats': 'ShareStats',
        'split_dividends': 'SplitDividends',
        'stock_symbol': 'str',
        'technicals': 'Technicals',
        'type': 'str',
        'valuation': 'Valuations'
    }

    attribute_map = {
        'address': 'address',
        'analyst_rankings': 'analyst_rankings',
        'balance_sheets': 'balance_sheets',
        'cik': 'cik',
        'contact': 'contact',
        'country_name': 'country_name',
        'currency': 'currency',
        'cusip': 'cusip',
        'description': 'description',
        'employer_id': 'employer_id',
        'exchange': 'exchange',
        'fiscal_year_end': 'fiscal_year_end',
        'fundamental_id': 'fundamental_id',
        'gic_group': 'gic_group',
        'gic_industry': 'gic_industry',
        'gic_sector': 'gic_sector',
        'highlights': 'highlights',
        'home_category': 'home_category',
        'industry': 'industry',
        'international_domestic': 'international_domestic',
        'ipo_date': 'ipo_date',
        'is_delisted': 'is_delisted',
        'isin': 'isin',
        'listings': 'listings',
        'name': 'name',
        'officers': 'officers',
        'sector': 'sector',
        'share_stats': 'share_stats',
        'split_dividends': 'split_dividends',
        'stock_symbol': 'stock_symbol',
        'technicals': 'technicals',
        'type': 'type',
        'valuation': 'valuation'
    }

    def __init__(self, address=None, analyst_rankings=None, balance_sheets=None, cik=None, contact=None, country_name=None, currency=None, cusip=None, description=None, employer_id=None, exchange=None, fiscal_year_end=None, fundamental_id=None, gic_group=None, gic_industry=None, gic_sector=None, highlights=None, home_category=None, industry=None, international_domestic=None, ipo_date=None, is_delisted=None, isin=None, listings=None, name=None, officers=None, sector=None, share_stats=None, split_dividends=None, stock_symbol=None, technicals=None, type=None, valuation=None, local_vars_configuration=None):  # noqa: E501
        """PublicFundamental - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._address = None
        self._analyst_rankings = None
        self._balance_sheets = None
        self._cik = None
        self._contact = None
        self._country_name = None
        self._currency = None
        self._cusip = None
        self._description = None
        self._employer_id = None
        self._exchange = None
        self._fiscal_year_end = None
        self._fundamental_id = None
        self._gic_group = None
        self._gic_industry = None
        self._gic_sector = None
        self._highlights = None
        self._home_category = None
        self._industry = None
        self._international_domestic = None
        self._ipo_date = None
        self._is_delisted = None
        self._isin = None
        self._listings = None
        self._name = None
        self._officers = None
        self._sector = None
        self._share_stats = None
        self._split_dividends = None
        self._stock_symbol = None
        self._technicals = None
        self._type = None
        self._valuation = None
        self.discriminator = None

        if address is not None:
            self.address = address
        if analyst_rankings is not None:
            self.analyst_rankings = analyst_rankings
        if balance_sheets is not None:
            self.balance_sheets = balance_sheets
        if cik is not None:
            self.cik = cik
        if contact is not None:
            self.contact = contact
        if country_name is not None:
            self.country_name = country_name
        if currency is not None:
            self.currency = currency
        if cusip is not None:
            self.cusip = cusip
        if description is not None:
            self.description = description
        if employer_id is not None:
            self.employer_id = employer_id
        if exchange is not None:
            self.exchange = exchange
        if fiscal_year_end is not None:
            self.fiscal_year_end = fiscal_year_end
        if fundamental_id is not None:
            self.fundamental_id = fundamental_id
        if gic_group is not None:
            self.gic_group = gic_group
        if gic_industry is not None:
            self.gic_industry = gic_industry
        if gic_sector is not None:
            self.gic_sector = gic_sector
        if highlights is not None:
            self.highlights = highlights
        if home_category is not None:
            self.home_category = home_category
        if industry is not None:
            self.industry = industry
        if international_domestic is not None:
            self.international_domestic = international_domestic
        if ipo_date is not None:
            self.ipo_date = ipo_date
        if is_delisted is not None:
            self.is_delisted = is_delisted
        if isin is not None:
            self.isin = isin
        if listings is not None:
            self.listings = listings
        if name is not None:
            self.name = name
        if officers is not None:
            self.officers = officers
        if sector is not None:
            self.sector = sector
        if share_stats is not None:
            self.share_stats = share_stats
        if split_dividends is not None:
            self.split_dividends = split_dividends
        if stock_symbol is not None:
            self.stock_symbol = stock_symbol
        if technicals is not None:
            self.technicals = technicals
        if type is not None:
            self.type = type
        if valuation is not None:
            self.valuation = valuation

    @property
    def address(self):
        """Gets the address of this PublicFundamental.  # noqa: E501


        :return: The address of this PublicFundamental.  # noqa: E501
        :rtype: GeneralAddress
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this PublicFundamental.


        :param address: The address of this PublicFundamental.  # noqa: E501
        :type: GeneralAddress
        """

        self._address = address

    @property
    def analyst_rankings(self):
        """Gets the analyst_rankings of this PublicFundamental.  # noqa: E501


        :return: The analyst_rankings of this PublicFundamental.  # noqa: E501
        :rtype: Analyst
        """
        return self._analyst_rankings

    @analyst_rankings.setter
    def analyst_rankings(self, analyst_rankings):
        """Sets the analyst_rankings of this PublicFundamental.


        :param analyst_rankings: The analyst_rankings of this PublicFundamental.  # noqa: E501
        :type: Analyst
        """

        self._analyst_rankings = analyst_rankings

    @property
    def balance_sheets(self):
        """Gets the balance_sheets of this PublicFundamental.  # noqa: E501


        :return: The balance_sheets of this PublicFundamental.  # noqa: E501
        :rtype: BalanceSheets
        """
        return self._balance_sheets

    @balance_sheets.setter
    def balance_sheets(self, balance_sheets):
        """Sets the balance_sheets of this PublicFundamental.


        :param balance_sheets: The balance_sheets of this PublicFundamental.  # noqa: E501
        :type: BalanceSheets
        """

        self._balance_sheets = balance_sheets

    @property
    def cik(self):
        """Gets the cik of this PublicFundamental.  # noqa: E501

        Company CIK Number  # noqa: E501

        :return: The cik of this PublicFundamental.  # noqa: E501
        :rtype: str
        """
        return self._cik

    @cik.setter
    def cik(self, cik):
        """Sets the cik of this PublicFundamental.

        Company CIK Number  # noqa: E501

        :param cik: The cik of this PublicFundamental.  # noqa: E501
        :type: str
        """

        self._cik = cik

    @property
    def contact(self):
        """Gets the contact of this PublicFundamental.  # noqa: E501


        :return: The contact of this PublicFundamental.  # noqa: E501
        :rtype: GeneralContact
        """
        return self._contact

    @contact.setter
    def contact(self, contact):
        """Sets the contact of this PublicFundamental.


        :param contact: The contact of this PublicFundamental.  # noqa: E501
        :type: GeneralContact
        """

        self._contact = contact

    @property
    def country_name(self):
        """Gets the country_name of this PublicFundamental.  # noqa: E501

        the name of the country where the company is trading  # noqa: E501

        :return: The country_name of this PublicFundamental.  # noqa: E501
        :rtype: str
        """
        return self._country_name

    @country_name.setter
    def country_name(self, country_name):
        """Sets the country_name of this PublicFundamental.

        the name of the country where the company is trading  # noqa: E501

        :param country_name: The country_name of this PublicFundamental.  # noqa: E501
        :type: str
        """

        self._country_name = country_name

    @property
    def currency(self):
        """Gets the currency of this PublicFundamental.  # noqa: E501

        currency symbol under which the company financials are declared  # noqa: E501

        :return: The currency of this PublicFundamental.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this PublicFundamental.

        currency symbol under which the company financials are declared  # noqa: E501

        :param currency: The currency of this PublicFundamental.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def cusip(self):
        """Gets the cusip of this PublicFundamental.  # noqa: E501

        Company CUSIP number  # noqa: E501

        :return: The cusip of this PublicFundamental.  # noqa: E501
        :rtype: str
        """
        return self._cusip

    @cusip.setter
    def cusip(self, cusip):
        """Sets the cusip of this PublicFundamental.

        Company CUSIP number  # noqa: E501

        :param cusip: The cusip of this PublicFundamental.  # noqa: E501
        :type: str
        """

        self._cusip = cusip

    @property
    def description(self):
        """Gets the description of this PublicFundamental.  # noqa: E501

        Description of a company  # noqa: E501

        :return: The description of this PublicFundamental.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PublicFundamental.

        Description of a company  # noqa: E501

        :param description: The description of this PublicFundamental.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def employer_id(self):
        """Gets the employer_id of this PublicFundamental.  # noqa: E501

        Company Employer ID  # noqa: E501

        :return: The employer_id of this PublicFundamental.  # noqa: E501
        :rtype: str
        """
        return self._employer_id

    @employer_id.setter
    def employer_id(self, employer_id):
        """Sets the employer_id of this PublicFundamental.

        Company Employer ID  # noqa: E501

        :param employer_id: The employer_id of this PublicFundamental.  # noqa: E501
        :type: str
        """

        self._employer_id = employer_id

    @property
    def exchange(self):
        """Gets the exchange of this PublicFundamental.  # noqa: E501

        the exchange_code the company has been listed under  # noqa: E501

        :return: The exchange of this PublicFundamental.  # noqa: E501
        :rtype: str
        """
        return self._exchange

    @exchange.setter
    def exchange(self, exchange):
        """Sets the exchange of this PublicFundamental.

        the exchange_code the company has been listed under  # noqa: E501

        :param exchange: The exchange of this PublicFundamental.  # noqa: E501
        :type: str
        """

        self._exchange = exchange

    @property
    def fiscal_year_end(self):
        """Gets the fiscal_year_end of this PublicFundamental.  # noqa: E501

        Date of Companies fiscal year end  # noqa: E501

        :return: The fiscal_year_end of this PublicFundamental.  # noqa: E501
        :rtype: date
        """
        return self._fiscal_year_end

    @fiscal_year_end.setter
    def fiscal_year_end(self, fiscal_year_end):
        """Sets the fiscal_year_end of this PublicFundamental.

        Date of Companies fiscal year end  # noqa: E501

        :param fiscal_year_end: The fiscal_year_end of this PublicFundamental.  # noqa: E501
        :type: date
        """

        self._fiscal_year_end = fiscal_year_end

    @property
    def fundamental_id(self):
        """Gets the fundamental_id of this PublicFundamental.  # noqa: E501

        company unique id, used to create records related to this company details for example Highlights Information  # noqa: E501

        :return: The fundamental_id of this PublicFundamental.  # noqa: E501
        :rtype: str
        """
        return self._fundamental_id

    @fundamental_id.setter
    def fundamental_id(self, fundamental_id):
        """Sets the fundamental_id of this PublicFundamental.

        company unique id, used to create records related to this company details for example Highlights Information  # noqa: E501

        :param fundamental_id: The fundamental_id of this PublicFundamental.  # noqa: E501
        :type: str
        """

        self._fundamental_id = fundamental_id

    @property
    def gic_group(self):
        """Gets the gic_group of this PublicFundamental.  # noqa: E501

        The Global Industry Classification Standard Group  # noqa: E501

        :return: The gic_group of this PublicFundamental.  # noqa: E501
        :rtype: str
        """
        return self._gic_group

    @gic_group.setter
    def gic_group(self, gic_group):
        """Sets the gic_group of this PublicFundamental.

        The Global Industry Classification Standard Group  # noqa: E501

        :param gic_group: The gic_group of this PublicFundamental.  # noqa: E501
        :type: str
        """

        self._gic_group = gic_group

    @property
    def gic_industry(self):
        """Gets the gic_industry of this PublicFundamental.  # noqa: E501

        The Global Industry Classification Standard Industry  # noqa: E501

        :return: The gic_industry of this PublicFundamental.  # noqa: E501
        :rtype: str
        """
        return self._gic_industry

    @gic_industry.setter
    def gic_industry(self, gic_industry):
        """Sets the gic_industry of this PublicFundamental.

        The Global Industry Classification Standard Industry  # noqa: E501

        :param gic_industry: The gic_industry of this PublicFundamental.  # noqa: E501
        :type: str
        """

        self._gic_industry = gic_industry

    @property
    def gic_sector(self):
        """Gets the gic_sector of this PublicFundamental.  # noqa: E501

        The Global Industry Classification Standard sector  # noqa: E501

        :return: The gic_sector of this PublicFundamental.  # noqa: E501
        :rtype: str
        """
        return self._gic_sector

    @gic_sector.setter
    def gic_sector(self, gic_sector):
        """Sets the gic_sector of this PublicFundamental.

        The Global Industry Classification Standard sector  # noqa: E501

        :param gic_sector: The gic_sector of this PublicFundamental.  # noqa: E501
        :type: str
        """

        self._gic_sector = gic_sector

    @property
    def highlights(self):
        """Gets the highlights of this PublicFundamental.  # noqa: E501


        :return: The highlights of this PublicFundamental.  # noqa: E501
        :rtype: Highlights
        """
        return self._highlights

    @highlights.setter
    def highlights(self, highlights):
        """Sets the highlights of this PublicFundamental.


        :param highlights: The highlights of this PublicFundamental.  # noqa: E501
        :type: Highlights
        """

        self._highlights = highlights

    @property
    def home_category(self):
        """Gets the home_category of this PublicFundamental.  # noqa: E501

        home category  # noqa: E501

        :return: The home_category of this PublicFundamental.  # noqa: E501
        :rtype: str
        """
        return self._home_category

    @home_category.setter
    def home_category(self, home_category):
        """Sets the home_category of this PublicFundamental.

        home category  # noqa: E501

        :param home_category: The home_category of this PublicFundamental.  # noqa: E501
        :type: str
        """

        self._home_category = home_category

    @property
    def industry(self):
        """Gets the industry of this PublicFundamental.  # noqa: E501

        The industry the company operates under  # noqa: E501

        :return: The industry of this PublicFundamental.  # noqa: E501
        :rtype: str
        """
        return self._industry

    @industry.setter
    def industry(self, industry):
        """Sets the industry of this PublicFundamental.

        The industry the company operates under  # noqa: E501

        :param industry: The industry of this PublicFundamental.  # noqa: E501
        :type: str
        """

        self._industry = industry

    @property
    def international_domestic(self):
        """Gets the international_domestic of this PublicFundamental.  # noqa: E501

        true if company operates internationally and domestically  # noqa: E501

        :return: The international_domestic of this PublicFundamental.  # noqa: E501
        :rtype: bool
        """
        return self._international_domestic

    @international_domestic.setter
    def international_domestic(self, international_domestic):
        """Sets the international_domestic of this PublicFundamental.

        true if company operates internationally and domestically  # noqa: E501

        :param international_domestic: The international_domestic of this PublicFundamental.  # noqa: E501
        :type: bool
        """

        self._international_domestic = international_domestic

    @property
    def ipo_date(self):
        """Gets the ipo_date of this PublicFundamental.  # noqa: E501

        Date of initial public offering  # noqa: E501

        :return: The ipo_date of this PublicFundamental.  # noqa: E501
        :rtype: date
        """
        return self._ipo_date

    @ipo_date.setter
    def ipo_date(self, ipo_date):
        """Sets the ipo_date of this PublicFundamental.

        Date of initial public offering  # noqa: E501

        :param ipo_date: The ipo_date of this PublicFundamental.  # noqa: E501
        :type: date
        """

        self._ipo_date = ipo_date

    @property
    def is_delisted(self):
        """Gets the is_delisted of this PublicFundamental.  # noqa: E501

        True if company is de_listed  # noqa: E501

        :return: The is_delisted of this PublicFundamental.  # noqa: E501
        :rtype: bool
        """
        return self._is_delisted

    @is_delisted.setter
    def is_delisted(self, is_delisted):
        """Sets the is_delisted of this PublicFundamental.

        True if company is de_listed  # noqa: E501

        :param is_delisted: The is_delisted of this PublicFundamental.  # noqa: E501
        :type: bool
        """

        self._is_delisted = is_delisted

    @property
    def isin(self):
        """Gets the isin of this PublicFundamental.  # noqa: E501

        Company ISIN number  # noqa: E501

        :return: The isin of this PublicFundamental.  # noqa: E501
        :rtype: str
        """
        return self._isin

    @isin.setter
    def isin(self, isin):
        """Sets the isin of this PublicFundamental.

        Company ISIN number  # noqa: E501

        :param isin: The isin of this PublicFundamental.  # noqa: E501
        :type: str
        """

        self._isin = isin

    @property
    def listings(self):
        """Gets the listings of this PublicFundamental.  # noqa: E501


        :return: The listings of this PublicFundamental.  # noqa: E501
        :rtype: GeneralListings
        """
        return self._listings

    @listings.setter
    def listings(self, listings):
        """Sets the listings of this PublicFundamental.


        :param listings: The listings of this PublicFundamental.  # noqa: E501
        :type: GeneralListings
        """

        self._listings = listings

    @property
    def name(self):
        """Gets the name of this PublicFundamental.  # noqa: E501

        company name as registered in the place country listed  # noqa: E501

        :return: The name of this PublicFundamental.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PublicFundamental.

        company name as registered in the place country listed  # noqa: E501

        :param name: The name of this PublicFundamental.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def officers(self):
        """Gets the officers of this PublicFundamental.  # noqa: E501


        :return: The officers of this PublicFundamental.  # noqa: E501
        :rtype: GeneralOfficers
        """
        return self._officers

    @officers.setter
    def officers(self, officers):
        """Sets the officers of this PublicFundamental.


        :param officers: The officers of this PublicFundamental.  # noqa: E501
        :type: GeneralOfficers
        """

        self._officers = officers

    @property
    def sector(self):
        """Gets the sector of this PublicFundamental.  # noqa: E501

        The business sector the company operates in  # noqa: E501

        :return: The sector of this PublicFundamental.  # noqa: E501
        :rtype: str
        """
        return self._sector

    @sector.setter
    def sector(self, sector):
        """Sets the sector of this PublicFundamental.

        The business sector the company operates in  # noqa: E501

        :param sector: The sector of this PublicFundamental.  # noqa: E501
        :type: str
        """

        self._sector = sector

    @property
    def share_stats(self):
        """Gets the share_stats of this PublicFundamental.  # noqa: E501


        :return: The share_stats of this PublicFundamental.  # noqa: E501
        :rtype: ShareStats
        """
        return self._share_stats

    @share_stats.setter
    def share_stats(self, share_stats):
        """Sets the share_stats of this PublicFundamental.


        :param share_stats: The share_stats of this PublicFundamental.  # noqa: E501
        :type: ShareStats
        """

        self._share_stats = share_stats

    @property
    def split_dividends(self):
        """Gets the split_dividends of this PublicFundamental.  # noqa: E501


        :return: The split_dividends of this PublicFundamental.  # noqa: E501
        :rtype: SplitDividends
        """
        return self._split_dividends

    @split_dividends.setter
    def split_dividends(self, split_dividends):
        """Sets the split_dividends of this PublicFundamental.


        :param split_dividends: The split_dividends of this PublicFundamental.  # noqa: E501
        :type: SplitDividends
        """

        self._split_dividends = split_dividends

    @property
    def stock_symbol(self):
        """Gets the stock_symbol of this PublicFundamental.  # noqa: E501

        company stock_codes as listed in the stock exchange_code  # noqa: E501

        :return: The stock_symbol of this PublicFundamental.  # noqa: E501
        :rtype: str
        """
        return self._stock_symbol

    @stock_symbol.setter
    def stock_symbol(self, stock_symbol):
        """Sets the stock_symbol of this PublicFundamental.

        company stock_codes as listed in the stock exchange_code  # noqa: E501

        :param stock_symbol: The stock_symbol of this PublicFundamental.  # noqa: E501
        :type: str
        """

        self._stock_symbol = stock_symbol

    @property
    def technicals(self):
        """Gets the technicals of this PublicFundamental.  # noqa: E501


        :return: The technicals of this PublicFundamental.  # noqa: E501
        :rtype: Technicals
        """
        return self._technicals

    @technicals.setter
    def technicals(self, technicals):
        """Sets the technicals of this PublicFundamental.


        :param technicals: The technicals of this PublicFundamental.  # noqa: E501
        :type: Technicals
        """

        self._technicals = technicals

    @property
    def type(self):
        """Gets the type of this PublicFundamental.  # noqa: E501

        company type  # noqa: E501

        :return: The type of this PublicFundamental.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PublicFundamental.

        company type  # noqa: E501

        :param type: The type of this PublicFundamental.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def valuation(self):
        """Gets the valuation of this PublicFundamental.  # noqa: E501


        :return: The valuation of this PublicFundamental.  # noqa: E501
        :rtype: Valuations
        """
        return self._valuation

    @valuation.setter
    def valuation(self, valuation):
        """Sets the valuation of this PublicFundamental.


        :param valuation: The valuation of this PublicFundamental.  # noqa: E501
        :type: Valuations
        """

        self._valuation = valuation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PublicFundamental):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PublicFundamental):
            return True

        return self.to_dict() != other.to_dict()

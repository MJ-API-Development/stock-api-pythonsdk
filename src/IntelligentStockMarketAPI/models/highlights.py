# coding: utf-8

"""
    EOD STOCK API

     <h2>Intelligent EOD Stocks API</h2>     <p>     End of day stock world wide STOCK API, this api is intended for use by web application developers,      and service providers looking for up-to-date always available.     <ul>         <li>Exchange Information</li>         <li>Stock Tickers Data</li>         <li>End of Day (EOD) Stock Data</li>         <li>Fundamental Data</li>         <li>Stock Options And Splits Data</li>         <li>Financial News API</li>         <li>Social Media Trend Data For Stocks</li>         <li>Sentiment Analysis for News & Social Media</li>     </ul>                The information provided covers more than 150 000 tickers, stocks, mutual funds and more around the world.         we provide information for any period, including daily, weekly.     </p>    # noqa: E501

    The version of the OpenAPI document: v1
    Contact: support@eod-stock-api.site
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from src.IntelligentStockMarketAPI.configuration import Configuration


class Highlights(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'book_value': 'float',
        'date_created': 'date',
        'diluted_eps_ttm': 'float',
        'dividend_share': 'float',
        'dividend_yield': 'float',
        'earnings_share': 'float',
        'ebitda': 'int',
        'eps_estimate_current_quarter': 'float',
        'eps_estimate_current_year': 'float',
        'eps_estimate_next_quarter': 'float',
        'eps_estimate_next_year': 'float',
        'fundamental_id': 'str',
        'growth_profit_ttm': 'float',
        'market_capitalization': 'int',
        'market_capitalization_mln': 'int',
        'most_recent_quarter': 'date',
        'operating_margin_ttm': 'float',
        'pe_ratio': 'float',
        'peg_ratio': 'float',
        'profit_margin': 'float',
        'quarterly_earnings_growth_yoy': 'float',
        'quarterly_revenue_growth_yoy': 'float',
        'return_on_assets_ttm': 'float',
        'return_on_equity_ttm': 'float',
        'revenue_per_share_ttm': 'float',
        'revenue_ttm': 'float',
        'target_price': 'int'
    }

    attribute_map = {
        'book_value': 'book_value',
        'date_created': 'date_created',
        'diluted_eps_ttm': 'diluted_eps_ttm',
        'dividend_share': 'dividend_share',
        'dividend_yield': 'dividend_yield',
        'earnings_share': 'earnings_share',
        'ebitda': 'ebitda',
        'eps_estimate_current_quarter': 'eps_estimate_current_quarter',
        'eps_estimate_current_year': 'eps_estimate_current_year',
        'eps_estimate_next_quarter': 'eps_estimate_next_quarter',
        'eps_estimate_next_year': 'eps_estimate_next_year',
        'fundamental_id': 'fundamental_id',
        'growth_profit_ttm': 'growth_profit_ttm',
        'market_capitalization': 'market_capitalization',
        'market_capitalization_mln': 'market_capitalization_mln',
        'most_recent_quarter': 'most_recent_quarter',
        'operating_margin_ttm': 'operating_margin_ttm',
        'pe_ratio': 'pe_ratio',
        'peg_ratio': 'peg_ratio',
        'profit_margin': 'profit_margin',
        'quarterly_earnings_growth_yoy': 'quarterly_earnings_growth_yoy',
        'quarterly_revenue_growth_yoy': 'quarterly_revenue_growth_yoy',
        'return_on_assets_ttm': 'return_on_assets_ttm',
        'return_on_equity_ttm': 'return_on_equity_ttm',
        'revenue_per_share_ttm': 'revenue_per_share_ttm',
        'revenue_ttm': 'revenue_ttm',
        'target_price': 'target_price'
    }

    def __init__(self, book_value=None, date_created=None, diluted_eps_ttm=None, dividend_share=None, dividend_yield=None, earnings_share=None, ebitda=None, eps_estimate_current_quarter=None, eps_estimate_current_year=None, eps_estimate_next_quarter=None, eps_estimate_next_year=None, fundamental_id=None, growth_profit_ttm=None, market_capitalization=None, market_capitalization_mln=None, most_recent_quarter=None, operating_margin_ttm=None, pe_ratio=None, peg_ratio=None, profit_margin=None, quarterly_earnings_growth_yoy=None, quarterly_revenue_growth_yoy=None, return_on_assets_ttm=None, return_on_equity_ttm=None, revenue_per_share_ttm=None, revenue_ttm=None, target_price=None, local_vars_configuration=None):  # noqa: E501
        """Highlights - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._book_value = None
        self._date_created = None
        self._diluted_eps_ttm = None
        self._dividend_share = None
        self._dividend_yield = None
        self._earnings_share = None
        self._ebitda = None
        self._eps_estimate_current_quarter = None
        self._eps_estimate_current_year = None
        self._eps_estimate_next_quarter = None
        self._eps_estimate_next_year = None
        self._fundamental_id = None
        self._growth_profit_ttm = None
        self._market_capitalization = None
        self._market_capitalization_mln = None
        self._most_recent_quarter = None
        self._operating_margin_ttm = None
        self._pe_ratio = None
        self._peg_ratio = None
        self._profit_margin = None
        self._quarterly_earnings_growth_yoy = None
        self._quarterly_revenue_growth_yoy = None
        self._return_on_assets_ttm = None
        self._return_on_equity_ttm = None
        self._revenue_per_share_ttm = None
        self._revenue_ttm = None
        self._target_price = None
        self.discriminator = None

        if book_value is not None:
            self.book_value = book_value
        if date_created is not None:
            self.date_created = date_created
        if diluted_eps_ttm is not None:
            self.diluted_eps_ttm = diluted_eps_ttm
        if dividend_share is not None:
            self.dividend_share = dividend_share
        if dividend_yield is not None:
            self.dividend_yield = dividend_yield
        if earnings_share is not None:
            self.earnings_share = earnings_share
        if ebitda is not None:
            self.ebitda = ebitda
        if eps_estimate_current_quarter is not None:
            self.eps_estimate_current_quarter = eps_estimate_current_quarter
        if eps_estimate_current_year is not None:
            self.eps_estimate_current_year = eps_estimate_current_year
        if eps_estimate_next_quarter is not None:
            self.eps_estimate_next_quarter = eps_estimate_next_quarter
        if eps_estimate_next_year is not None:
            self.eps_estimate_next_year = eps_estimate_next_year
        if fundamental_id is not None:
            self.fundamental_id = fundamental_id
        if growth_profit_ttm is not None:
            self.growth_profit_ttm = growth_profit_ttm
        if market_capitalization is not None:
            self.market_capitalization = market_capitalization
        if market_capitalization_mln is not None:
            self.market_capitalization_mln = market_capitalization_mln
        if most_recent_quarter is not None:
            self.most_recent_quarter = most_recent_quarter
        if operating_margin_ttm is not None:
            self.operating_margin_ttm = operating_margin_ttm
        if pe_ratio is not None:
            self.pe_ratio = pe_ratio
        if peg_ratio is not None:
            self.peg_ratio = peg_ratio
        if profit_margin is not None:
            self.profit_margin = profit_margin
        if quarterly_earnings_growth_yoy is not None:
            self.quarterly_earnings_growth_yoy = quarterly_earnings_growth_yoy
        if quarterly_revenue_growth_yoy is not None:
            self.quarterly_revenue_growth_yoy = quarterly_revenue_growth_yoy
        if return_on_assets_ttm is not None:
            self.return_on_assets_ttm = return_on_assets_ttm
        if return_on_equity_ttm is not None:
            self.return_on_equity_ttm = return_on_equity_ttm
        if revenue_per_share_ttm is not None:
            self.revenue_per_share_ttm = revenue_per_share_ttm
        if revenue_ttm is not None:
            self.revenue_ttm = revenue_ttm
        if target_price is not None:
            self.target_price = target_price

    @property
    def book_value(self):
        """Gets the book_value of this Highlights.  # noqa: E501

        Net value of a company assets as found on its balance sheet  # noqa: E501

        :return: The book_value of this Highlights.  # noqa: E501
        :rtype: float
        """
        return self._book_value

    @book_value.setter
    def book_value(self, book_value):
        """Sets the book_value of this Highlights.

        Net value of a company assets as found on its balance sheet  # noqa: E501

        :param book_value: The book_value of this Highlights.  # noqa: E501
        :type: float
        """

        self._book_value = book_value

    @property
    def date_created(self):
        """Gets the date_created of this Highlights.  # noqa: E501

        date the highlights where created  # noqa: E501

        :return: The date_created of this Highlights.  # noqa: E501
        :rtype: date
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this Highlights.

        date the highlights where created  # noqa: E501

        :param date_created: The date_created of this Highlights.  # noqa: E501
        :type: date
        """

        self._date_created = date_created

    @property
    def diluted_eps_ttm(self):
        """Gets the diluted_eps_ttm of this Highlights.  # noqa: E501

        amount of income each receives if all of the dilute securities are realized, which is the amount of income that is available to the current common shareholders  # noqa: E501

        :return: The diluted_eps_ttm of this Highlights.  # noqa: E501
        :rtype: float
        """
        return self._diluted_eps_ttm

    @diluted_eps_ttm.setter
    def diluted_eps_ttm(self, diluted_eps_ttm):
        """Sets the diluted_eps_ttm of this Highlights.

        amount of income each receives if all of the dilute securities are realized, which is the amount of income that is available to the current common shareholders  # noqa: E501

        :param diluted_eps_ttm: The diluted_eps_ttm of this Highlights.  # noqa: E501
        :type: float
        """

        self._diluted_eps_ttm = diluted_eps_ttm

    @property
    def dividend_share(self):
        """Gets the dividend_share of this Highlights.  # noqa: E501

        rewards that a company gives to its shareholders  # noqa: E501

        :return: The dividend_share of this Highlights.  # noqa: E501
        :rtype: float
        """
        return self._dividend_share

    @dividend_share.setter
    def dividend_share(self, dividend_share):
        """Sets the dividend_share of this Highlights.

        rewards that a company gives to its shareholders  # noqa: E501

        :param dividend_share: The dividend_share of this Highlights.  # noqa: E501
        :type: float
        """

        self._dividend_share = dividend_share

    @property
    def dividend_yield(self):
        """Gets the dividend_yield of this Highlights.  # noqa: E501

        amount of money a company pays shareholders for owning a   # noqa: E501

        :return: The dividend_yield of this Highlights.  # noqa: E501
        :rtype: float
        """
        return self._dividend_yield

    @dividend_yield.setter
    def dividend_yield(self, dividend_yield):
        """Sets the dividend_yield of this Highlights.

        amount of money a company pays shareholders for owning a   # noqa: E501

        :param dividend_yield: The dividend_yield of this Highlights.  # noqa: E501
        :type: float
        """

        self._dividend_yield = dividend_yield

    @property
    def earnings_share(self):
        """Gets the earnings_share of this Highlights.  # noqa: E501

        earnings per share (ESP) is a company net profit divided by the number of common shares it has outstanding  # noqa: E501

        :return: The earnings_share of this Highlights.  # noqa: E501
        :rtype: float
        """
        return self._earnings_share

    @earnings_share.setter
    def earnings_share(self, earnings_share):
        """Sets the earnings_share of this Highlights.

        earnings per share (ESP) is a company net profit divided by the number of common shares it has outstanding  # noqa: E501

        :param earnings_share: The earnings_share of this Highlights.  # noqa: E501
        :type: float
        """

        self._earnings_share = earnings_share

    @property
    def ebitda(self):
        """Gets the ebitda of this Highlights.  # noqa: E501

        Earnings before Interest Taxes Depreciation and Amortization  # noqa: E501

        :return: The ebitda of this Highlights.  # noqa: E501
        :rtype: int
        """
        return self._ebitda

    @ebitda.setter
    def ebitda(self, ebitda):
        """Sets the ebitda of this Highlights.

        Earnings before Interest Taxes Depreciation and Amortization  # noqa: E501

        :param ebitda: The ebitda of this Highlights.  # noqa: E501
        :type: int
        """

        self._ebitda = ebitda

    @property
    def eps_estimate_current_quarter(self):
        """Gets the eps_estimate_current_quarter of this Highlights.  # noqa: E501

        earnings per share (EPS) estimate for current quarter  # noqa: E501

        :return: The eps_estimate_current_quarter of this Highlights.  # noqa: E501
        :rtype: float
        """
        return self._eps_estimate_current_quarter

    @eps_estimate_current_quarter.setter
    def eps_estimate_current_quarter(self, eps_estimate_current_quarter):
        """Sets the eps_estimate_current_quarter of this Highlights.

        earnings per share (EPS) estimate for current quarter  # noqa: E501

        :param eps_estimate_current_quarter: The eps_estimate_current_quarter of this Highlights.  # noqa: E501
        :type: float
        """

        self._eps_estimate_current_quarter = eps_estimate_current_quarter

    @property
    def eps_estimate_current_year(self):
        """Gets the eps_estimate_current_year of this Highlights.  # noqa: E501

        earnings per share estimate for current year  # noqa: E501

        :return: The eps_estimate_current_year of this Highlights.  # noqa: E501
        :rtype: float
        """
        return self._eps_estimate_current_year

    @eps_estimate_current_year.setter
    def eps_estimate_current_year(self, eps_estimate_current_year):
        """Sets the eps_estimate_current_year of this Highlights.

        earnings per share estimate for current year  # noqa: E501

        :param eps_estimate_current_year: The eps_estimate_current_year of this Highlights.  # noqa: E501
        :type: float
        """

        self._eps_estimate_current_year = eps_estimate_current_year

    @property
    def eps_estimate_next_quarter(self):
        """Gets the eps_estimate_next_quarter of this Highlights.  # noqa: E501

        earnings per share estimate for next quarter  # noqa: E501

        :return: The eps_estimate_next_quarter of this Highlights.  # noqa: E501
        :rtype: float
        """
        return self._eps_estimate_next_quarter

    @eps_estimate_next_quarter.setter
    def eps_estimate_next_quarter(self, eps_estimate_next_quarter):
        """Sets the eps_estimate_next_quarter of this Highlights.

        earnings per share estimate for next quarter  # noqa: E501

        :param eps_estimate_next_quarter: The eps_estimate_next_quarter of this Highlights.  # noqa: E501
        :type: float
        """

        self._eps_estimate_next_quarter = eps_estimate_next_quarter

    @property
    def eps_estimate_next_year(self):
        """Gets the eps_estimate_next_year of this Highlights.  # noqa: E501

        earnings per share estimate for next year  # noqa: E501

        :return: The eps_estimate_next_year of this Highlights.  # noqa: E501
        :rtype: float
        """
        return self._eps_estimate_next_year

    @eps_estimate_next_year.setter
    def eps_estimate_next_year(self, eps_estimate_next_year):
        """Sets the eps_estimate_next_year of this Highlights.

        earnings per share estimate for next year  # noqa: E501

        :param eps_estimate_next_year: The eps_estimate_next_year of this Highlights.  # noqa: E501
        :type: float
        """

        self._eps_estimate_next_year = eps_estimate_next_year

    @property
    def fundamental_id(self):
        """Gets the fundamental_id of this Highlights.  # noqa: E501

        unique company id for fundamental data  # noqa: E501

        :return: The fundamental_id of this Highlights.  # noqa: E501
        :rtype: str
        """
        return self._fundamental_id

    @fundamental_id.setter
    def fundamental_id(self, fundamental_id):
        """Sets the fundamental_id of this Highlights.

        unique company id for fundamental data  # noqa: E501

        :param fundamental_id: The fundamental_id of this Highlights.  # noqa: E501
        :type: str
        """

        self._fundamental_id = fundamental_id

    @property
    def growth_profit_ttm(self):
        """Gets the growth_profit_ttm of this Highlights.  # noqa: E501

        profit a business makes after subtracting all the costs that are related to manufacturing and selling its products or services  # noqa: E501

        :return: The growth_profit_ttm of this Highlights.  # noqa: E501
        :rtype: float
        """
        return self._growth_profit_ttm

    @growth_profit_ttm.setter
    def growth_profit_ttm(self, growth_profit_ttm):
        """Sets the growth_profit_ttm of this Highlights.

        profit a business makes after subtracting all the costs that are related to manufacturing and selling its products or services  # noqa: E501

        :param growth_profit_ttm: The growth_profit_ttm of this Highlights.  # noqa: E501
        :type: float
        """

        self._growth_profit_ttm = growth_profit_ttm

    @property
    def market_capitalization(self):
        """Gets the market_capitalization of this Highlights.  # noqa: E501

        Market Capitalization  # noqa: E501

        :return: The market_capitalization of this Highlights.  # noqa: E501
        :rtype: int
        """
        return self._market_capitalization

    @market_capitalization.setter
    def market_capitalization(self, market_capitalization):
        """Sets the market_capitalization of this Highlights.

        Market Capitalization  # noqa: E501

        :param market_capitalization: The market_capitalization of this Highlights.  # noqa: E501
        :type: int
        """

        self._market_capitalization = market_capitalization

    @property
    def market_capitalization_mln(self):
        """Gets the market_capitalization_mln of this Highlights.  # noqa: E501

        market capitalization in millions  # noqa: E501

        :return: The market_capitalization_mln of this Highlights.  # noqa: E501
        :rtype: int
        """
        return self._market_capitalization_mln

    @market_capitalization_mln.setter
    def market_capitalization_mln(self, market_capitalization_mln):
        """Sets the market_capitalization_mln of this Highlights.

        market capitalization in millions  # noqa: E501

        :param market_capitalization_mln: The market_capitalization_mln of this Highlights.  # noqa: E501
        :type: int
        """

        self._market_capitalization_mln = market_capitalization_mln

    @property
    def most_recent_quarter(self):
        """Gets the most_recent_quarter of this Highlights.  # noqa: E501

        MRQ refers to percent of revenues remaining after paying all expenses  # noqa: E501

        :return: The most_recent_quarter of this Highlights.  # noqa: E501
        :rtype: date
        """
        return self._most_recent_quarter

    @most_recent_quarter.setter
    def most_recent_quarter(self, most_recent_quarter):
        """Sets the most_recent_quarter of this Highlights.

        MRQ refers to percent of revenues remaining after paying all expenses  # noqa: E501

        :param most_recent_quarter: The most_recent_quarter of this Highlights.  # noqa: E501
        :type: date
        """

        self._most_recent_quarter = most_recent_quarter

    @property
    def operating_margin_ttm(self):
        """Gets the operating_margin_ttm of this Highlights.  # noqa: E501

        measures the percent of revenues remaining after paying all operating expenses for trailing twelve months  # noqa: E501

        :return: The operating_margin_ttm of this Highlights.  # noqa: E501
        :rtype: float
        """
        return self._operating_margin_ttm

    @operating_margin_ttm.setter
    def operating_margin_ttm(self, operating_margin_ttm):
        """Sets the operating_margin_ttm of this Highlights.

        measures the percent of revenues remaining after paying all operating expenses for trailing twelve months  # noqa: E501

        :param operating_margin_ttm: The operating_margin_ttm of this Highlights.  # noqa: E501
        :type: float
        """

        self._operating_margin_ttm = operating_margin_ttm

    @property
    def pe_ratio(self):
        """Gets the pe_ratio of this Highlights.  # noqa: E501

        Price Earnings Ratio  # noqa: E501

        :return: The pe_ratio of this Highlights.  # noqa: E501
        :rtype: float
        """
        return self._pe_ratio

    @pe_ratio.setter
    def pe_ratio(self, pe_ratio):
        """Sets the pe_ratio of this Highlights.

        Price Earnings Ratio  # noqa: E501

        :param pe_ratio: The pe_ratio of this Highlights.  # noqa: E501
        :type: float
        """

        self._pe_ratio = pe_ratio

    @property
    def peg_ratio(self):
        """Gets the peg_ratio of this Highlights.  # noqa: E501

        Price Earnings to Growth Ratio  # noqa: E501

        :return: The peg_ratio of this Highlights.  # noqa: E501
        :rtype: float
        """
        return self._peg_ratio

    @peg_ratio.setter
    def peg_ratio(self, peg_ratio):
        """Sets the peg_ratio of this Highlights.

        Price Earnings to Growth Ratio  # noqa: E501

        :param peg_ratio: The peg_ratio of this Highlights.  # noqa: E501
        :type: float
        """

        self._peg_ratio = peg_ratio

    @property
    def profit_margin(self):
        """Gets the profit_margin of this Highlights.  # noqa: E501

        profit margin measures the degree to which a company makes money equals to revenue cost divided by Revenue  # noqa: E501

        :return: The profit_margin of this Highlights.  # noqa: E501
        :rtype: float
        """
        return self._profit_margin

    @profit_margin.setter
    def profit_margin(self, profit_margin):
        """Sets the profit_margin of this Highlights.

        profit margin measures the degree to which a company makes money equals to revenue cost divided by Revenue  # noqa: E501

        :param profit_margin: The profit_margin of this Highlights.  # noqa: E501
        :type: float
        """

        self._profit_margin = profit_margin

    @property
    def quarterly_earnings_growth_yoy(self):
        """Gets the quarterly_earnings_growth_yoy of this Highlights.  # noqa: E501

        an increase in the companys sales from one quarter to the next, compared on a year-over-year basis  # noqa: E501

        :return: The quarterly_earnings_growth_yoy of this Highlights.  # noqa: E501
        :rtype: float
        """
        return self._quarterly_earnings_growth_yoy

    @quarterly_earnings_growth_yoy.setter
    def quarterly_earnings_growth_yoy(self, quarterly_earnings_growth_yoy):
        """Sets the quarterly_earnings_growth_yoy of this Highlights.

        an increase in the companys sales from one quarter to the next, compared on a year-over-year basis  # noqa: E501

        :param quarterly_earnings_growth_yoy: The quarterly_earnings_growth_yoy of this Highlights.  # noqa: E501
        :type: float
        """

        self._quarterly_earnings_growth_yoy = quarterly_earnings_growth_yoy

    @property
    def quarterly_revenue_growth_yoy(self):
        """Gets the quarterly_revenue_growth_yoy of this Highlights.  # noqa: E501

        increase in the companys sales from one quarter to the next a good yoy growth is between 15 to 45%  # noqa: E501

        :return: The quarterly_revenue_growth_yoy of this Highlights.  # noqa: E501
        :rtype: float
        """
        return self._quarterly_revenue_growth_yoy

    @quarterly_revenue_growth_yoy.setter
    def quarterly_revenue_growth_yoy(self, quarterly_revenue_growth_yoy):
        """Sets the quarterly_revenue_growth_yoy of this Highlights.

        increase in the companys sales from one quarter to the next a good yoy growth is between 15 to 45%  # noqa: E501

        :param quarterly_revenue_growth_yoy: The quarterly_revenue_growth_yoy of this Highlights.  # noqa: E501
        :type: float
        """

        self._quarterly_revenue_growth_yoy = quarterly_revenue_growth_yoy

    @property
    def return_on_assets_ttm(self):
        """Gets the return_on_assets_ttm of this Highlights.  # noqa: E501

        income after taxes for the trailing twelve months divided by the average total assets  # noqa: E501

        :return: The return_on_assets_ttm of this Highlights.  # noqa: E501
        :rtype: float
        """
        return self._return_on_assets_ttm

    @return_on_assets_ttm.setter
    def return_on_assets_ttm(self, return_on_assets_ttm):
        """Sets the return_on_assets_ttm of this Highlights.

        income after taxes for the trailing twelve months divided by the average total assets  # noqa: E501

        :param return_on_assets_ttm: The return_on_assets_ttm of this Highlights.  # noqa: E501
        :type: float
        """

        self._return_on_assets_ttm = return_on_assets_ttm

    @property
    def return_on_equity_ttm(self):
        """Gets the return_on_equity_ttm of this Highlights.  # noqa: E501

        income available to common stockholders for the trailing twelve months divided by the average common equity expressed as a percentage  # noqa: E501

        :return: The return_on_equity_ttm of this Highlights.  # noqa: E501
        :rtype: float
        """
        return self._return_on_equity_ttm

    @return_on_equity_ttm.setter
    def return_on_equity_ttm(self, return_on_equity_ttm):
        """Sets the return_on_equity_ttm of this Highlights.

        income available to common stockholders for the trailing twelve months divided by the average common equity expressed as a percentage  # noqa: E501

        :param return_on_equity_ttm: The return_on_equity_ttm of this Highlights.  # noqa: E501
        :type: float
        """

        self._return_on_equity_ttm = return_on_equity_ttm

    @property
    def revenue_per_share_ttm(self):
        """Gets the revenue_per_share_ttm of this Highlights.  # noqa: E501

        Sales per share (Revenue) is a ratio that computes the total revenue earned for the trailing twelve months  # noqa: E501

        :return: The revenue_per_share_ttm of this Highlights.  # noqa: E501
        :rtype: float
        """
        return self._revenue_per_share_ttm

    @revenue_per_share_ttm.setter
    def revenue_per_share_ttm(self, revenue_per_share_ttm):
        """Sets the revenue_per_share_ttm of this Highlights.

        Sales per share (Revenue) is a ratio that computes the total revenue earned for the trailing twelve months  # noqa: E501

        :param revenue_per_share_ttm: The revenue_per_share_ttm of this Highlights.  # noqa: E501
        :type: float
        """

        self._revenue_per_share_ttm = revenue_per_share_ttm

    @property
    def revenue_ttm(self):
        """Gets the revenue_ttm of this Highlights.  # noqa: E501

        revenue a company earns over the trailing twelve months (TTM)  # noqa: E501

        :return: The revenue_ttm of this Highlights.  # noqa: E501
        :rtype: float
        """
        return self._revenue_ttm

    @revenue_ttm.setter
    def revenue_ttm(self, revenue_ttm):
        """Sets the revenue_ttm of this Highlights.

        revenue a company earns over the trailing twelve months (TTM)  # noqa: E501

        :param revenue_ttm: The revenue_ttm of this Highlights.  # noqa: E501
        :type: float
        """

        self._revenue_ttm = revenue_ttm

    @property
    def target_price(self):
        """Gets the target_price of this Highlights.  # noqa: E501

        The value an investor or analyst anticipates a stock will reach within a defined time period  # noqa: E501

        :return: The target_price of this Highlights.  # noqa: E501
        :rtype: int
        """
        return self._target_price

    @target_price.setter
    def target_price(self, target_price):
        """Sets the target_price of this Highlights.

        The value an investor or analyst anticipates a stock will reach within a defined time period  # noqa: E501

        :param target_price: The target_price of this Highlights.  # noqa: E501
        :type: int
        """

        self._target_price = target_price

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Highlights):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Highlights):
            return True

        return self.to_dict() != other.to_dict()

# coding: utf-8

"""
    EOD STOCK API

     <h2>Intelligent EOD Stocks API</h2>     <p>     End of day stock world wide STOCK API, this api is intended for use by web application developers,      and service providers looking for up-to-date always available.     <ul>         <li>Exchange Information</li>         <li>Stock Tickers Data</li>         <li>End of Day (EOD) Stock Data</li>         <li>Fundamental Data</li>         <li>Stock Options And Splits Data</li>         <li>Financial News API</li>         <li>Social Media Trend Data For Stocks</li>         <li>Sentiment Analysis for News & Social Media</li>     </ul>                The information provided covers more than 150 000 tickers, stocks, mutual funds and more around the world.         we provide information for any period, including daily, weekly.     </p>    # noqa: E501

    The version of the OpenAPI document: v1
    Contact: support@eod-stock-api.site
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from src.IntelligentStockMarketAPI.configuration import Configuration


class Payload(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'followers_count': 'int',
        'friends_count': 'int',
        'location': 'str',
        'name': 'str',
        'profile_image_url': 'str',
        'screen_name': 'str',
        'sentiments': 'list[Sentiment]',
        'statuses_count': 'int',
        'total_bearish': 'int',
        'total_bullish': 'int',
        'tweeter_profile_link': 'str',
        'uid': 'str'
    }

    attribute_map = {
        'followers_count': 'followers_count',
        'friends_count': 'friends_count',
        'location': 'location',
        'name': 'name',
        'profile_image_url': 'profile_image_url',
        'screen_name': 'screen_name',
        'sentiments': 'sentiments',
        'statuses_count': 'statuses_count',
        'total_bearish': 'total_bearish',
        'total_bullish': 'total_bullish',
        'tweeter_profile_link': 'tweeter_profile_link',
        'uid': 'uid'
    }

    def __init__(self, followers_count=None, friends_count=None, location=None, name=None, profile_image_url=None, screen_name=None, sentiments=None, statuses_count=None, total_bearish=None, total_bullish=None, tweeter_profile_link=None, uid=None, local_vars_configuration=None):  # noqa: E501
        """Payload - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._followers_count = None
        self._friends_count = None
        self._location = None
        self._name = None
        self._profile_image_url = None
        self._screen_name = None
        self._sentiments = None
        self._statuses_count = None
        self._total_bearish = None
        self._total_bullish = None
        self._tweeter_profile_link = None
        self._uid = None
        self.discriminator = None

        if followers_count is not None:
            self.followers_count = followers_count
        if friends_count is not None:
            self.friends_count = friends_count
        if location is not None:
            self.location = location
        if name is not None:
            self.name = name
        if profile_image_url is not None:
            self.profile_image_url = profile_image_url
        if screen_name is not None:
            self.screen_name = screen_name
        if sentiments is not None:
            self.sentiments = sentiments
        if statuses_count is not None:
            self.statuses_count = statuses_count
        if total_bearish is not None:
            self.total_bearish = total_bearish
        if total_bullish is not None:
            self.total_bullish = total_bullish
        if tweeter_profile_link is not None:
            self.tweeter_profile_link = tweeter_profile_link
        if uid is not None:
            self.uid = uid

    @property
    def followers_count(self):
        """Gets the followers_count of this Payload.  # noqa: E501


        :return: The followers_count of this Payload.  # noqa: E501
        :rtype: int
        """
        return self._followers_count

    @followers_count.setter
    def followers_count(self, followers_count):
        """Sets the followers_count of this Payload.


        :param followers_count: The followers_count of this Payload.  # noqa: E501
        :type: int
        """

        self._followers_count = followers_count

    @property
    def friends_count(self):
        """Gets the friends_count of this Payload.  # noqa: E501


        :return: The friends_count of this Payload.  # noqa: E501
        :rtype: int
        """
        return self._friends_count

    @friends_count.setter
    def friends_count(self, friends_count):
        """Sets the friends_count of this Payload.


        :param friends_count: The friends_count of this Payload.  # noqa: E501
        :type: int
        """

        self._friends_count = friends_count

    @property
    def location(self):
        """Gets the location of this Payload.  # noqa: E501


        :return: The location of this Payload.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Payload.


        :param location: The location of this Payload.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def name(self):
        """Gets the name of this Payload.  # noqa: E501


        :return: The name of this Payload.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Payload.


        :param name: The name of this Payload.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def profile_image_url(self):
        """Gets the profile_image_url of this Payload.  # noqa: E501


        :return: The profile_image_url of this Payload.  # noqa: E501
        :rtype: str
        """
        return self._profile_image_url

    @profile_image_url.setter
    def profile_image_url(self, profile_image_url):
        """Sets the profile_image_url of this Payload.


        :param profile_image_url: The profile_image_url of this Payload.  # noqa: E501
        :type: str
        """

        self._profile_image_url = profile_image_url

    @property
    def screen_name(self):
        """Gets the screen_name of this Payload.  # noqa: E501


        :return: The screen_name of this Payload.  # noqa: E501
        :rtype: str
        """
        return self._screen_name

    @screen_name.setter
    def screen_name(self, screen_name):
        """Sets the screen_name of this Payload.


        :param screen_name: The screen_name of this Payload.  # noqa: E501
        :type: str
        """

        self._screen_name = screen_name

    @property
    def sentiments(self):
        """Gets the sentiments of this Payload.  # noqa: E501


        :return: The sentiments of this Payload.  # noqa: E501
        :rtype: list[Sentiment]
        """
        return self._sentiments

    @sentiments.setter
    def sentiments(self, sentiments):
        """Sets the sentiments of this Payload.


        :param sentiments: The sentiments of this Payload.  # noqa: E501
        :type: list[Sentiment]
        """

        self._sentiments = sentiments

    @property
    def statuses_count(self):
        """Gets the statuses_count of this Payload.  # noqa: E501


        :return: The statuses_count of this Payload.  # noqa: E501
        :rtype: int
        """
        return self._statuses_count

    @statuses_count.setter
    def statuses_count(self, statuses_count):
        """Sets the statuses_count of this Payload.


        :param statuses_count: The statuses_count of this Payload.  # noqa: E501
        :type: int
        """

        self._statuses_count = statuses_count

    @property
    def total_bearish(self):
        """Gets the total_bearish of this Payload.  # noqa: E501


        :return: The total_bearish of this Payload.  # noqa: E501
        :rtype: int
        """
        return self._total_bearish

    @total_bearish.setter
    def total_bearish(self, total_bearish):
        """Sets the total_bearish of this Payload.


        :param total_bearish: The total_bearish of this Payload.  # noqa: E501
        :type: int
        """

        self._total_bearish = total_bearish

    @property
    def total_bullish(self):
        """Gets the total_bullish of this Payload.  # noqa: E501


        :return: The total_bullish of this Payload.  # noqa: E501
        :rtype: int
        """
        return self._total_bullish

    @total_bullish.setter
    def total_bullish(self, total_bullish):
        """Sets the total_bullish of this Payload.


        :param total_bullish: The total_bullish of this Payload.  # noqa: E501
        :type: int
        """

        self._total_bullish = total_bullish

    @property
    def tweeter_profile_link(self):
        """Gets the tweeter_profile_link of this Payload.  # noqa: E501


        :return: The tweeter_profile_link of this Payload.  # noqa: E501
        :rtype: str
        """
        return self._tweeter_profile_link

    @tweeter_profile_link.setter
    def tweeter_profile_link(self, tweeter_profile_link):
        """Sets the tweeter_profile_link of this Payload.


        :param tweeter_profile_link: The tweeter_profile_link of this Payload.  # noqa: E501
        :type: str
        """

        self._tweeter_profile_link = tweeter_profile_link

    @property
    def uid(self):
        """Gets the uid of this Payload.  # noqa: E501


        :return: The uid of this Payload.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this Payload.


        :param uid: The uid of this Payload.  # noqa: E501
        :type: str
        """

        self._uid = uid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Payload):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Payload):
            return True

        return self.to_dict() != other.to_dict()

# coding: utf-8

"""
    EOD STOCK API

     <h2>Intelligent EOD Stocks API</h2>     <p>     End of day stock world wide STOCK API, this api is intended for use by web application developers,      and service providers looking for up-to-date always available.     <ul>         <li>Exchange Information</li>         <li>Stock Tickers Data</li>         <li>End of Day (EOD) Stock Data</li>         <li>Fundamental Data</li>         <li>Stock Options And Splits Data</li>         <li>Financial News API</li>         <li>Social Media Trend Data For Stocks</li>         <li>Sentiment Analysis for News & Social Media</li>     </ul>                The information provided covers more than 150 000 tickers, stocks, mutual funds and more around the world.         we provide information for any period, including daily, weekly.     </p>    # noqa: E501

    The version of the OpenAPI document: v1
    Contact: support@eod-stock-api.site
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from src.IntelligentStockMarketAPI.configuration import Configuration


class GeneralAddress(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'city': 'str',
        'country': 'str',
        'fundamental_id': 'str',
        'state': 'str',
        'street': 'str',
        'zip': 'str'
    }

    attribute_map = {
        'city': 'city',
        'country': 'country',
        'fundamental_id': 'fundamental_id',
        'state': 'state',
        'street': 'street',
        'zip': 'zip'
    }

    def __init__(self, city=None, country=None, fundamental_id=None, state=None, street=None, zip=None, local_vars_configuration=None):  # noqa: E501
        """GeneralAddress - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._city = None
        self._country = None
        self._fundamental_id = None
        self._state = None
        self._street = None
        self._zip = None
        self.discriminator = None

        if city is not None:
            self.city = city
        if country is not None:
            self.country = country
        if fundamental_id is not None:
            self.fundamental_id = fundamental_id
        if state is not None:
            self.state = state
        if street is not None:
            self.street = street
        if zip is not None:
            self.zip = zip

    @property
    def city(self):
        """Gets the city of this GeneralAddress.  # noqa: E501

        company address city  # noqa: E501

        :return: The city of this GeneralAddress.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this GeneralAddress.

        company address city  # noqa: E501

        :param city: The city of this GeneralAddress.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def country(self):
        """Gets the country of this GeneralAddress.  # noqa: E501

        Company Address country  # noqa: E501

        :return: The country of this GeneralAddress.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this GeneralAddress.

        Company Address country  # noqa: E501

        :param country: The country of this GeneralAddress.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def fundamental_id(self):
        """Gets the fundamental_id of this GeneralAddress.  # noqa: E501

        a unique id for the General Fundamental Company Data  # noqa: E501

        :return: The fundamental_id of this GeneralAddress.  # noqa: E501
        :rtype: str
        """
        return self._fundamental_id

    @fundamental_id.setter
    def fundamental_id(self, fundamental_id):
        """Sets the fundamental_id of this GeneralAddress.

        a unique id for the General Fundamental Company Data  # noqa: E501

        :param fundamental_id: The fundamental_id of this GeneralAddress.  # noqa: E501
        :type: str
        """

        self._fundamental_id = fundamental_id

    @property
    def state(self):
        """Gets the state of this GeneralAddress.  # noqa: E501

        Company Address state or province  # noqa: E501

        :return: The state of this GeneralAddress.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this GeneralAddress.

        Company Address state or province  # noqa: E501

        :param state: The state of this GeneralAddress.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def street(self):
        """Gets the street of this GeneralAddress.  # noqa: E501

        company address street name  # noqa: E501

        :return: The street of this GeneralAddress.  # noqa: E501
        :rtype: str
        """
        return self._street

    @street.setter
    def street(self, street):
        """Sets the street of this GeneralAddress.

        company address street name  # noqa: E501

        :param street: The street of this GeneralAddress.  # noqa: E501
        :type: str
        """

        self._street = street

    @property
    def zip(self):
        """Gets the zip of this GeneralAddress.  # noqa: E501

        Company Address zip or postal code  # noqa: E501

        :return: The zip of this GeneralAddress.  # noqa: E501
        :rtype: str
        """
        return self._zip

    @zip.setter
    def zip(self, zip):
        """Sets the zip of this GeneralAddress.

        Company Address zip or postal code  # noqa: E501

        :param zip: The zip of this GeneralAddress.  # noqa: E501
        :type: str
        """

        self._zip = zip

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GeneralAddress):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GeneralAddress):
            return True

        return self.to_dict() != other.to_dict()

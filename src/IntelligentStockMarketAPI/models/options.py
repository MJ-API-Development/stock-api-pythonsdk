# coding: utf-8

"""
    EOD STOCK API

     <h2>Intelligent EOD Stocks API</h2>     <p>     End of day stock world wide STOCK API, this api is intended for use by web application developers,      and service providers looking for up-to-date always available.     <ul>         <li>Exchange Information</li>         <li>Stock Tickers Data</li>         <li>End of Day (EOD) Stock Data</li>         <li>Fundamental Data</li>         <li>Stock Options And Splits Data</li>         <li>Financial News API</li>         <li>Social Media Trend Data For Stocks</li>         <li>Sentiment Analysis for News & Social Media</li>     </ul>                The information provided covers more than 150 000 tickers, stocks, mutual funds and more around the world.         we provide information for any period, including daily, weekly.     </p>    # noqa: E501

    The version of the OpenAPI document: v1
    Contact: support@eod-stock-api.site
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from src.IntelligentStockMarketAPI.configuration import Configuration


class Options(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'currency': 'str',
        'exchange': 'str',
        'last_trade_date': 'date',
        'last_trade_price': 'str',
        'options_id': 'str',
        'stock_symbol': 'str'
    }

    attribute_map = {
        'currency': 'currency',
        'exchange': 'exchange',
        'last_trade_date': 'last_trade_date',
        'last_trade_price': 'last_trade_price',
        'options_id': 'options_id',
        'stock_symbol': 'stock_symbol'
    }

    def __init__(self, currency=None, exchange=None, last_trade_date=None, last_trade_price=None, options_id=None, stock_symbol=None, local_vars_configuration=None):  # noqa: E501
        """Options - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._currency = None
        self._exchange = None
        self._last_trade_date = None
        self._last_trade_price = None
        self._options_id = None
        self._stock_symbol = None
        self.discriminator = None

        if currency is not None:
            self.currency = currency
        if exchange is not None:
            self.exchange = exchange
        if last_trade_date is not None:
            self.last_trade_date = last_trade_date
        if last_trade_price is not None:
            self.last_trade_price = last_trade_price
        if options_id is not None:
            self.options_id = options_id
        if stock_symbol is not None:
            self.stock_symbol = stock_symbol

    @property
    def currency(self):
        """Gets the currency of this Options.  # noqa: E501

        currency for trade  # noqa: E501

        :return: The currency of this Options.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Options.

        currency for trade  # noqa: E501

        :param currency: The currency of this Options.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def exchange(self):
        """Gets the exchange of this Options.  # noqa: E501

        exchange_code id for the options  # noqa: E501

        :return: The exchange of this Options.  # noqa: E501
        :rtype: str
        """
        return self._exchange

    @exchange.setter
    def exchange(self, exchange):
        """Sets the exchange of this Options.

        exchange_code id for the options  # noqa: E501

        :param exchange: The exchange of this Options.  # noqa: E501
        :type: str
        """

        self._exchange = exchange

    @property
    def last_trade_date(self):
        """Gets the last_trade_date of this Options.  # noqa: E501

        last trade date  # noqa: E501

        :return: The last_trade_date of this Options.  # noqa: E501
        :rtype: date
        """
        return self._last_trade_date

    @last_trade_date.setter
    def last_trade_date(self, last_trade_date):
        """Sets the last_trade_date of this Options.

        last trade date  # noqa: E501

        :param last_trade_date: The last_trade_date of this Options.  # noqa: E501
        :type: date
        """

        self._last_trade_date = last_trade_date

    @property
    def last_trade_price(self):
        """Gets the last_trade_price of this Options.  # noqa: E501

        last traded price  # noqa: E501

        :return: The last_trade_price of this Options.  # noqa: E501
        :rtype: str
        """
        return self._last_trade_price

    @last_trade_price.setter
    def last_trade_price(self, last_trade_price):
        """Sets the last_trade_price of this Options.

        last traded price  # noqa: E501

        :param last_trade_price: The last_trade_price of this Options.  # noqa: E501
        :type: str
        """

        self._last_trade_price = last_trade_price

    @property
    def options_id(self):
        """Gets the options_id of this Options.  # noqa: E501

        will carry a unique options id  # noqa: E501

        :return: The options_id of this Options.  # noqa: E501
        :rtype: str
        """
        return self._options_id

    @options_id.setter
    def options_id(self, options_id):
        """Sets the options_id of this Options.

        will carry a unique options id  # noqa: E501

        :param options_id: The options_id of this Options.  # noqa: E501
        :type: str
        """

        self._options_id = options_id

    @property
    def stock_symbol(self):
        """Gets the stock_symbol of this Options.  # noqa: E501

        symbol for stock  # noqa: E501

        :return: The stock_symbol of this Options.  # noqa: E501
        :rtype: str
        """
        return self._stock_symbol

    @stock_symbol.setter
    def stock_symbol(self, stock_symbol):
        """Sets the stock_symbol of this Options.

        symbol for stock  # noqa: E501

        :param stock_symbol: The stock_symbol of this Options.  # noqa: E501
        :type: str
        """

        self._stock_symbol = stock_symbol

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Options):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Options):
            return True

        return self.to_dict() != other.to_dict()

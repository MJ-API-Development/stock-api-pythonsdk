# coding: utf-8

"""
    EOD STOCK API

     <h2>Intelligent EOD Stocks API</h2>     <p>     End of day stock world wide STOCK API, this api is intended for use by web application developers,      and service providers looking for up-to-date always available.     <ul>         <li>Exchange Information</li>         <li>Stock Tickers Data</li>         <li>End of Day (EOD) Stock Data</li>         <li>Fundamental Data</li>         <li>Stock Options And Splits Data</li>         <li>Financial News API</li>         <li>Social Media Trend Data For Stocks</li>         <li>Sentiment Analysis for News & Social Media</li>     </ul>                The information provided covers more than 150 000 tickers, stocks, mutual funds and more around the world.         we provide information for any period, including daily, weekly.     </p>    # noqa: E501

    The version of the OpenAPI document: v1
    Contact: support@eod-stock-api.site
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from src.IntelligentStockMarketAPI.configuration import Configuration


class AddressResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'message': 'str',
        'payload': 'GeneralAddress',
        'status': 'bool'
    }

    attribute_map = {
        'message': 'message',
        'payload': 'payload',
        'status': 'status'
    }

    def __init__(self, message=None, payload=None, status=None, local_vars_configuration=None):  # noqa: E501
        """AddressResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._message = None
        self._payload = None
        self._status = None
        self.discriminator = None

        if message is not None:
            self.message = message
        if payload is not None:
            self.payload = payload
        if status is not None:
            self.status = status

    @property
    def message(self):
        """Gets the message of this AddressResponse.  # noqa: E501

        message explaining the response  # noqa: E501

        :return: The message of this AddressResponse.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this AddressResponse.

        message explaining the response  # noqa: E501

        :param message: The message of this AddressResponse.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def payload(self):
        """Gets the payload of this AddressResponse.  # noqa: E501

        Company Address  # noqa: E501

        :return: The payload of this AddressResponse.  # noqa: E501
        :rtype: GeneralAddress
        """
        return self._payload

    @payload.setter
    def payload(self, payload):
        """Sets the payload of this AddressResponse.

        Company Address  # noqa: E501

        :param payload: The payload of this AddressResponse.  # noqa: E501
        :type: GeneralAddress
        """

        self._payload = payload

    @property
    def status(self):
        """Gets the status of this AddressResponse.  # noqa: E501

        if status is True data was found and payload contains valid data  # noqa: E501

        :return: The status of this AddressResponse.  # noqa: E501
        :rtype: bool
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AddressResponse.

        if status is True data was found and payload contains valid data  # noqa: E501

        :param status: The status of this AddressResponse.  # noqa: E501
        :type: bool
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddressResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AddressResponse):
            return True

        return self.to_dict() != other.to_dict()

# coding: utf-8

"""
    EOD STOCK API

     <h2>Intelligent EOD Stocks API</h2>     <p>     End of day stock world wide STOCK API, this api is intended for use by web application developers,      and service providers looking for up-to-date always available.     <ul>         <li>Exchange Information</li>         <li>Stock Tickers Data</li>         <li>End of Day (EOD) Stock Data</li>         <li>Fundamental Data</li>         <li>Stock Options And Splits Data</li>         <li>Financial News API</li>         <li>Social Media Trend Data For Stocks</li>         <li>Sentiment Analysis for News & Social Media</li>     </ul>                The information provided covers more than 150 000 tickers, stocks, mutual funds and more around the world.         we provide information for any period, including daily, weekly.     </p>    # noqa: E501

    The version of the OpenAPI document: v1
    Contact: support@eod-stock-api.site
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from src.IntelligentStockMarketAPI.configuration import Configuration


class AnnualBalanceSheet(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'balance_sheet': 'BalanceSheet',
        'filing_date': 'date'
    }

    attribute_map = {
        'balance_sheet': 'balance_sheet',
        'filing_date': 'filing_date'
    }

    def __init__(self, balance_sheet=None, filing_date=None, local_vars_configuration=None):  # noqa: E501
        """AnnualBalanceSheet - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._balance_sheet = None
        self._filing_date = None
        self.discriminator = None

        if balance_sheet is not None:
            self.balance_sheet = balance_sheet
        if filing_date is not None:
            self.filing_date = filing_date

    @property
    def balance_sheet(self):
        """Gets the balance_sheet of this AnnualBalanceSheet.  # noqa: E501


        :return: The balance_sheet of this AnnualBalanceSheet.  # noqa: E501
        :rtype: BalanceSheet
        """
        return self._balance_sheet

    @balance_sheet.setter
    def balance_sheet(self, balance_sheet):
        """Sets the balance_sheet of this AnnualBalanceSheet.


        :param balance_sheet: The balance_sheet of this AnnualBalanceSheet.  # noqa: E501
        :type: BalanceSheet
        """

        self._balance_sheet = balance_sheet

    @property
    def filing_date(self):
        """Gets the filing_date of this AnnualBalanceSheet.  # noqa: E501

        Date of filing  # noqa: E501

        :return: The filing_date of this AnnualBalanceSheet.  # noqa: E501
        :rtype: date
        """
        return self._filing_date

    @filing_date.setter
    def filing_date(self, filing_date):
        """Sets the filing_date of this AnnualBalanceSheet.

        Date of filing  # noqa: E501

        :param filing_date: The filing_date of this AnnualBalanceSheet.  # noqa: E501
        :type: date
        """

        self._filing_date = filing_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnnualBalanceSheet):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AnnualBalanceSheet):
            return True

        return self.to_dict() != other.to_dict()

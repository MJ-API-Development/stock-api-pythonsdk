# coding: utf-8

"""
    EOD STOCK API

     <h2>Intelligent EOD Stocks API</h2>     <p>     End of day stock world wide STOCK API, this api is intended for use by web application developers,      and service providers looking for up-to-date always available.     <ul>         <li>Exchange Information</li>         <li>Stock Tickers Data</li>         <li>End of Day (EOD) Stock Data</li>         <li>Fundamental Data</li>         <li>Stock Options And Splits Data</li>         <li>Financial News API</li>         <li>Social Media Trend Data For Stocks</li>         <li>Sentiment Analysis for News & Social Media</li>     </ul>                The information provided covers more than 150 000 tickers, stocks, mutual funds and more around the world.         we provide information for any period, including daily, weekly.     </p>    # noqa: E501

    The version of the OpenAPI document: v1
    Contact: support@eod-stock-api.site
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from src.IntelligentStockMarketAPI.configuration import Configuration


class News(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'link': 'str',
        'provider_publish_time': 'int',
        'publisher': 'str',
        'related_tickers': 'RelatedTickers',
        'thumbnail': 'Thumbnail',
        'title': 'str',
        'type': 'str',
        'uuid': 'str'
    }

    attribute_map = {
        'link': 'link',
        'provider_publish_time': 'providerPublishTime',
        'publisher': 'publisher',
        'related_tickers': 'relatedTickers',
        'thumbnail': 'thumbnail',
        'title': 'title',
        'type': 'type',
        'uuid': 'uuid'
    }

    def __init__(self, link=None, provider_publish_time=None, publisher=None, related_tickers=None, thumbnail=None, title=None, type=None, uuid=None, local_vars_configuration=None):  # noqa: E501
        """News - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._link = None
        self._provider_publish_time = None
        self._publisher = None
        self._related_tickers = None
        self._thumbnail = None
        self._title = None
        self._type = None
        self._uuid = None
        self.discriminator = None

        if link is not None:
            self.link = link
        if provider_publish_time is not None:
            self.provider_publish_time = provider_publish_time
        if publisher is not None:
            self.publisher = publisher
        if related_tickers is not None:
            self.related_tickers = related_tickers
        if thumbnail is not None:
            self.thumbnail = thumbnail
        if title is not None:
            self.title = title
        if type is not None:
            self.type = type
        if uuid is not None:
            self.uuid = uuid

    @property
    def link(self):
        """Gets the link of this News.  # noqa: E501


        :return: The link of this News.  # noqa: E501
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this News.


        :param link: The link of this News.  # noqa: E501
        :type: str
        """

        self._link = link

    @property
    def provider_publish_time(self):
        """Gets the provider_publish_time of this News.  # noqa: E501


        :return: The provider_publish_time of this News.  # noqa: E501
        :rtype: int
        """
        return self._provider_publish_time

    @provider_publish_time.setter
    def provider_publish_time(self, provider_publish_time):
        """Sets the provider_publish_time of this News.


        :param provider_publish_time: The provider_publish_time of this News.  # noqa: E501
        :type: int
        """

        self._provider_publish_time = provider_publish_time

    @property
    def publisher(self):
        """Gets the publisher of this News.  # noqa: E501


        :return: The publisher of this News.  # noqa: E501
        :rtype: str
        """
        return self._publisher

    @publisher.setter
    def publisher(self, publisher):
        """Sets the publisher of this News.


        :param publisher: The publisher of this News.  # noqa: E501
        :type: str
        """

        self._publisher = publisher

    @property
    def related_tickers(self):
        """Gets the related_tickers of this News.  # noqa: E501


        :return: The related_tickers of this News.  # noqa: E501
        :rtype: RelatedTickers
        """
        return self._related_tickers

    @related_tickers.setter
    def related_tickers(self, related_tickers):
        """Sets the related_tickers of this News.


        :param related_tickers: The related_tickers of this News.  # noqa: E501
        :type: RelatedTickers
        """

        self._related_tickers = related_tickers

    @property
    def thumbnail(self):
        """Gets the thumbnail of this News.  # noqa: E501


        :return: The thumbnail of this News.  # noqa: E501
        :rtype: Thumbnail
        """
        return self._thumbnail

    @thumbnail.setter
    def thumbnail(self, thumbnail):
        """Sets the thumbnail of this News.


        :param thumbnail: The thumbnail of this News.  # noqa: E501
        :type: Thumbnail
        """

        self._thumbnail = thumbnail

    @property
    def title(self):
        """Gets the title of this News.  # noqa: E501


        :return: The title of this News.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this News.


        :param title: The title of this News.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def type(self):
        """Gets the type of this News.  # noqa: E501


        :return: The type of this News.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this News.


        :param type: The type of this News.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def uuid(self):
        """Gets the uuid of this News.  # noqa: E501


        :return: The uuid of this News.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this News.


        :param uuid: The uuid of this News.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, News):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, News):
            return True

        return self.to_dict() != other.to_dict()
